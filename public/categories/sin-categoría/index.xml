<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog de Modesto San Juan</title>
    <link>http://www.modestosanjuan.com.com/categories/sin-categor%C3%ADa/index.xml</link>
    <description>Recent content on Blog de Modesto San Juan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-es</language>
    <atom:link href="http://www.modestosanjuan.com.com/categories/sin-categor%C3%ADa/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>La regla del boy scout</title>
      <link>http://www.modestosanjuan.com.com/la-regla-del-boy-scout/</link>
      <pubDate>Thu, 10 Nov 2016 10:01:15 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com.com/la-regla-del-boy-scout/</guid>
      <description>

&lt;p&gt;Hay discipinas en las que dicen que a largo plazo es más importante la constancia que el talento. Creo que en el desarrollo de software tener constancia es una virtud.&lt;/p&gt;

&lt;p&gt;Conforme va avanzando un proyecto, es normal que el diseño sufra cambios (preferiblemente pequeños) y a la vez el código puede sufrir altibajos de calidad.&lt;/p&gt;

&lt;p&gt;Tener un conocimiento escaso del problema, equivocarnos al enfocar la solución y muchos otros factores pueden llevarnos a una circunstancia muy habitual: estamos enfocando una historia de usuario y pasamos por una parte de nuestro código que no se entiende bien, está mal enfocada, es complicada de extender, en general, nos está impidiendo avanzar de forma fluida hacia nuestro objetivo, entregar valor.&lt;/p&gt;

&lt;h2 id=&#34;patadón-palante&#34;&gt;Patadón palante&lt;/h2&gt;

&lt;p&gt;Un intento de solución que he visto con frecuencia es el del &amp;#8220;patadón palante&amp;#8221; haciendo una ñapa para sacar la historia lo antes posible y luego, cada cierto tiempo, se mete una historia técnia en el sprint para eliminar deuda técnica y listo. Ron Jeffries describe muy bien este problema en &lt;a href=&#34;http://ronjeffries.com/xprog/articles/refactoring-not-on-the-backlog/&#34;&gt;Refactoring not on the backlog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No voy a negar que hay veces que es una solución perfectamente válida en circunstancias en las que es realmente importante cumplir con un plazo. El problema lo veo cuando se convierte en práctica habitual. Si tu proyecto requiere constantemente recurrir al &amp;#8220;patadón palante&amp;#8221;, tal vez deberías replantearte las fechas, el alcance y/o la forma en la que estás enfocando el desarrollo de tu software.&lt;/p&gt;

&lt;h2 id=&#34;la-regla-del-boy-scout&#34;&gt;La regla del boy scout&lt;/h2&gt;

&lt;p&gt;Otra opción es asegurarnos de que en cada historia de usuario que entregamos y en cada incidencia que resolvemos, el código está mejor de como lo encontramos. Uncle Bob lo llama aplicar la &amp;#8220;regla del boy scout&amp;#8221;, Fowler lo llama &lt;a href=&#34;http://martinfowler.com/bliki/OpportunisticRefactoring.html&#34;&gt;refactor oportunista&lt;/a&gt;, pero en esencia vienen a decir lo mismo.&lt;/p&gt;

&lt;p&gt;Una de las grandes ventajas de aplicar esta regla es que se dedican más cuiadados a las zonas que más se tocan, lo que nos ayuda a no terminar teniendo una &lt;a href=&#34;https://blog.codinghorror.com/the-big-ball-of-mud-and-other-architectural-disasters/&#34;&gt;big ball of mud&lt;/a&gt; y terminar con un desastre inmantenible.&lt;/p&gt;

&lt;p&gt;Alguno podrá pensar &amp;#8220;pero entonces te estás dejando partes de tu software sin &amp;#8216;limpiar&amp;rsquo;&amp;#8221;. En efecto, pero son partes que no están dando problemas (no tienen incidencias) y que no estamos necesitando tocar (no hay HU), así que, por el momento, ¡no hay necesidad de dedicarles ni un minuto!&lt;/p&gt;

&lt;h2 id=&#34;poco-a-poco&#34;&gt;Poco a poco&lt;/h2&gt;

&lt;p&gt;Da igual el estado en el que se encuentre nuestro software, si de manera constante terminamos nuestra jornada y está un poco mejor que cuando la empezamos, a largo plazo veremos que nuestro flujo de entrega de valor es muchísimo mejor que antes.&lt;/p&gt;

&lt;p&gt;No es necesario tardar tres veces más en hacer una historia de usuario porque nos embarcamos en un refactor de dimensiones monstruosas, con que esté un poco mejor es suficiente.&lt;/p&gt;

&lt;h2 id=&#34;la-excusa-del-tiempo&#34;&gt;La excusa del tiempo&lt;/h2&gt;

&lt;p&gt;Habitualmente escucho la excusa de &amp;#8220;es que no tenemos tiempo para eso, tenemos que entregar las historias de usuario lo antes posible&amp;#8221;. Esa afirmación es un arma de doble filo porque si no prestamos a nuestro código la atención necesaria, el tiempo que tardaremos en terminar las historias de usuario será cada vez mayor y es muy probable que el número de incidencias se incremente.&lt;/p&gt;

&lt;h2 id=&#34;mantenernos-en-una-solución-simple&#34;&gt;Mantenernos en una solución simple&lt;/h2&gt;

&lt;p&gt;Recurrir a arquitecturas y diseños demasiado complejos tiende a crear software rígido que pierde capacidad de maniobra de cara al futuro. No olvidemos de que es precisamente en el futuro cuando tendremos más conocimiento del problema y, por lo tanto, estaremos más cualificados para ofrecer mejores soluciones. Anclarnos a arquitectures encorsetadas desde el principio puede dar una sensación muy &amp;#8220;enterprise&amp;#8221;, pero se convierte en un problema en el futuro.&lt;/p&gt;

&lt;p&gt;En esta línea recomiendo leer &lt;a href=&#34;https://leanpub.com/4rulesofsimpledesign&#34;&gt;Understanding the Four Rules of Simple Design&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;el-coste-de-deshacer&#34;&gt;El coste de deshacer&lt;/h2&gt;

&lt;p&gt;A menudo tenemos en cuenta únicamente el coste de hacer, pero es muy importante tener en cuenta también el coste de deshacer.&lt;/p&gt;

&lt;p&gt;Recurrir a código de terceros no es malo, puede ahorrarnos muchísimas horas de trabajo en aspectos que posiblemente no tengan nada que ver con nuestro negocio. Pero al hacerlo debemos escoger muy bien la forma en la que lo hacemos.&lt;/p&gt;

&lt;p&gt;Esta es una de las razones por las que se suele hablar de la preferencia de usar librerías vs frameworks. El coste de deshacer cuando hablamos de una librería puede ser relativamente bajo si además hemos creado las abstracciones necesarias. Cuando escogemos acoplarnos a un Framework, el coste de deshacer es más alto.&lt;/p&gt;

&lt;p&gt;Por supuesto, es una cuestión de equilibrio y hay muchas veces en las que el coste a pagar por utilizar un framework merece completamente la pena.&lt;/p&gt;

&lt;p&gt;Aunque no habla exáctamente de este tema, me gusta mucho el vídeo &lt;a href=&#34;https://www.infoq.com/presentations/8-lines-code-refactoring&#34;&gt;&amp;#8220;8 Lines of Code&amp;#8221;&lt;/a&gt; de Greg Young, en el que habla del coste de atarnos a soluciones mágicas.&lt;/p&gt;

&lt;h2 id=&#34;conclusión&#34;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;Debemos intentar que nuestro código sea siempre un poquito mejor. La única forma de hacer que nuestro código sea mejor es mejorar nosotros. Si identificamos que tomamos malas decisiones con demasiada frecuencia, tenemos que deshacer mucho de lo que hacemos, no somos capaces de alcanzar un flujo de entrega adecuado, tal vez tengamos que plantearnos invertir un poco de tiempo en mejorar. Existen multitud de recursos que nos pueden ayudar a desarrollar mejor, tenemos las comunidades y los eventos de comunidad, cursos online y presenciales, blogs de un nivel bestial&amp;#8230; lo que no tenemos es excusa.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;##&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Desarrollador, pon contenedores en tu vida</title>
      <link>http://www.modestosanjuan.com.com/desarrollador-pon-contenedores-en-tu-vida/</link>
      <pubDate>Sun, 06 Nov 2016 23:10:11 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com.com/desarrollador-pon-contenedores-en-tu-vida/</guid>
      <description>&lt;p&gt;No, en este post no te voy a vender las virtudes de desplegar su aplicación sobre docker. Mucho se ha escrito sobre el tema y mucho se seguirá escribiendo. También se ha escrito de &lt;a href=&#34;https://thehftguy.wordpress.com/2016/11/01/docker-in-production-an-history-of-failure/&#34;&gt;lo malo que es&lt;/a&gt; docker y de lo &lt;a href=&#34;http://patrobinson.github.io/2016/11/05/docker-in-production/&#34;&gt;no tan malo que es&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Este post está destinado especialmente a todos aquellos desarrolladores que no desplegáis vuestras aplicaciones con Docker. Porque los que ya usáis docker en el ciclo de entrega ya sabéis lo que voy a contar y además os parece obvio.&lt;/p&gt;

&lt;p&gt;Seguro que alguna vez has tenido que instalarte Redis, Mongo, Couchbase, MySql, ElasticSearch, RabbitMq o cualquier otro software similar para hacer una prueba puntual, por requisitos de un proyecto fugaz o para hacer un spike y decidir si finalmente introduces esa pieza o no en tu infraestructura.&lt;/p&gt;

&lt;p&gt;Lo normal antes de tener contenedores era instalar el software en cuestión en nuestra máquina o tal vez recurrir a una máquina virtual. Lo de la máquina virtual era práctica habitual cuando sabíamos que el software a instalar iba a causar estragos en nuestra máquina, ya fuera en forma de mierda repartida por todo el sistema o en forma de losa de 500kg para el rendimiento.&lt;/p&gt;

&lt;p&gt;Pues ahora tenemos una opción más, con las ventajas de aislamiento de las máquinas virtuales pero muchísimo más sencillo. Gracias al &lt;a href=&#34;https://hub.docker.com/&#34;&gt;hub de docker&lt;/a&gt; tenemos al alcance de un &amp;#8220;docker run&amp;#8221; imágenes oficiales de todos los programas mencionados antes y muchos más. Incluso tenemos algunas no oficiales que pueden ser de mucha ayuda, como Oracle. Si, Oracle, porque quién narices quiere instalarse Oracle para hacer 4 pruebas pudiendo tirar de una imagen preconfigurada!.&lt;/p&gt;

&lt;p&gt;Si las imágenes están curradas (suelen estarlo), podrás incluso personalizar aspectos del funcionamiento de la aplicación. Por ejemplo, la &lt;a href=&#34;https://hub.docker.com/_/redis/&#34;&gt;imagen de Redis&lt;/a&gt; está preparada para poder usar tu propio &amp;#8220;redis.conf&amp;#8221; o simplemente para usar redis con contraseña.&lt;/p&gt;

&lt;p&gt;Por cierto, aunque las imágenes del &lt;a href=&#34;https://hub.docker.com/r/microsoft/&#34;&gt;repositorio de Microsoft&lt;/a&gt; aún no se consideran oficiales dentro del hub de Docker, son las oficiales de Microsoft, son de fiar 😉&lt;/p&gt;

&lt;p&gt;Tal como lo he mencionado parece que esto de usar Docker durante el desarrollo es algo que sólo vale para hacer pruebas. Pues no, puedes usarlo en tu día a día y así evitar contaminar tu sistema con instalaciones que luego tienes que actualizar cada cierto tiempo, acumulando cada vez más y más &amp;#8220;restos&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Un último briconsejo: Si tienes la oportunidad, intenta usar las versiones tageadas como &amp;#8220;alpine&amp;#8221;. Evidentemente, las versiones &amp;#8220;alpine&amp;#8221; están basadas en &lt;a href=&#34;https://alpinelinux.org/&#34;&gt;Alpine Linux&lt;/a&gt;, una distribución &amp;#8220;security-oriented&amp;#8221; que pesa sólo 5Mb. En la mayoría de los casos, teniendo en cuenta que lo que queremos probar es únicamente el software de la imagen que hemos bajado, será suficiente. Como referencia, la imagen &amp;#8220;latest&amp;#8221; de Redis ocupa 74Mb y la &amp;#8220;alpine&amp;#8221; ocupa sólo 8Mb.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nuevos retos</title>
      <link>http://www.modestosanjuan.com.com/nuevos-retos/</link>
      <pubDate>Fri, 14 Oct 2016 15:40:53 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com.com/nuevos-retos/</guid>
      <description>&lt;p&gt;Estos últimos dos meses he andado bastante liado y no he prestado mucha atención al blog. Esta vez no voy a hablar de ningún tema técnico, se trata de una post muy personal. Si no te interesa mi vida, deja de leer. Si te interesa, eres un poco cotilla ;P&lt;/p&gt;

&lt;p&gt;Este mes cierro una etapa profesional maravillosa que me ha dado muchas alegrías, me ha permitido trabajar con un equipo genial, aprender como no lo hacía en muchos años y divertirme haciendo lo que más me gusta, desarrollar software.&lt;/p&gt;

&lt;p&gt;Para mi estos dos últimos años han sido muy importantes. Hace dos años terminaba otra etapa muy importante en mi vida que duró 10 años y durante la que intenté sacar adelante una empresa de desarrollo. Las cosas no terminaron bien y tuve que hacer algo a lo que no estoy acostumbrado, buscar trabajo.&lt;/p&gt;

&lt;p&gt;Y fue precisamente cuando Carlos Blé se cruzó en mi camino. Casualmente Carlos estaba en Madrid por trabajo y coincidimos en un par de eventos de MSCoders. Me comentó que tal vez saliese un proyecto chulo en las Palmas y me preguntó si me interesaría ayudarles dedicando unos días de consultoría como experto en .Net.&lt;/p&gt;

&lt;p&gt;Al final el proyecto salió y, en lugar de unos días, terminó siendo una propuesta para un proyecto de un año, incluyendo los primeros 3 meses en presencial en Las Palmas y con visitas frecuentes el resto del año.&lt;/p&gt;

&lt;p&gt;Así que me vi de no tener curro, a tener dos ofertas: una de una entidad bancaria &amp;#8220;cerca&amp;#8221; de casa y la otra para un proyecto de un año, como autónomo, pasando un periodo bastante largo fuera de casa y teniendo que viajar bastante.&lt;/p&gt;

&lt;p&gt;El caso es que el proyecto de Canarias era muy interesante, para mi iba a ser todo un reto y se planteaba como una oportunidad única. Así que acepté la propuesta de Carlos y un mes después estaba compartiendo piso con él y con Fran en Las Palmas.&lt;/p&gt;

&lt;p&gt;Pasó el año en un suspiro y el proyecto se renovó para otro año, que ha vuelto a pasar en un suspiro.&lt;/p&gt;

&lt;p&gt;Han sido dos años muy intensos en los que he aprendido muchísimo y he desaprendido más todavía. Creo que nunca he aprendido tanto concentrado en tan poco tiempo. Y eso es algo que tengo que agradecerle a mucha gente:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A Alfredo, Carlos y Fran (que no ronca) por subir tanto el listón. Gracias a vosotros me siento como los hobbits al volver a la comarca. He crecido, mis estadísticas han subido y ahora tengo varios niveles más. Pero además tengo a tres compañeros de aventuras.&lt;/li&gt;
&lt;li&gt;A los trabajadores de Aida, la empresa que ha confiado en nosotros los últimos dos años. La evolución que hemos podido experimentar en todos ha sido un gran aliciente para seguir mejorando. No quiero hacerle el feo a nadie así que no daré nombres 😉&lt;/li&gt;
&lt;li&gt;Por orden de aparición, a Ronny, Miguel, Dani y Jose. Teneros como aprendices ha sido todo un reto. Tenéis tanta inquietud que rejuvenezco cuando paso tiempo con vosotros. Compartir piso con vosotros cuando voy a Canarias es como hacer un hackathon diario, pero me ha encantado.&lt;/li&gt;
&lt;li&gt;A Luis Rovirosa, aunque hemos podido compartir poco tiempo juntos, cada vez que lo hemos hecho me has hecho crecer un poquito.&lt;/li&gt;
&lt;li&gt;A Antonio de la Torre. Aunque nuestros caminos prácticamente se han cruzado, ha sido genial. Sólo lamento no haber podido coincidir más tiempo, porque no muchos pueden jactarse de haberme hecho cambiar de opinión tantas veces en tan poco tiempo. Tenemos que volver a compartir vagón bar en el tren camino de algún evento 😉&lt;/li&gt;
&lt;li&gt;A mi familia por tener tanta paciencia. Ha habido meses en los que he pasado mucho tiempo fuera de casa entre el trabajo y los eventos de la comunidad, pero me han apoyado siempre.&lt;/li&gt;
&lt;li&gt;A la comunidad, por ella conseguí trabajo hace dos años y por ella lo cambio ahora.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Me resulta raro dejar una empresa en la que soy feliz. Puede sonar raro que lo explique así, pero el cuerpo me pide aprovechar la oportunidad laboral que se me ha presentado. Salgo de Codesai orgulloso de haber formado parte de sus comienzos y con la convicción de que nuestros caminos se volverán a cruzar de una forma u otra.&lt;/p&gt;

&lt;p&gt;Lo mejor de todo, gracias a la comunidad podremos vernos y compartir teclado.&lt;/p&gt;

&lt;p&gt;Actualización: Mis compañeros de Codesai me han dedicado un [Estos últimos dos meses he andado bastante liado y no he prestado mucha atención al blog. Esta vez no voy a hablar de ningún tema técnico, se trata de una post muy personal. Si no te interesa mi vida, deja de leer. Si te interesa, eres un poco cotilla ;P&lt;/p&gt;

&lt;p&gt;Este mes cierro una etapa profesional maravillosa que me ha dado muchas alegrías, me ha permitido trabajar con un equipo genial, aprender como no lo hacía en muchos años y divertirme haciendo lo que más me gusta, desarrollar software.&lt;/p&gt;

&lt;p&gt;Para mi estos dos últimos años han sido muy importantes. Hace dos años terminaba otra etapa muy importante en mi vida que duró 10 años y durante la que intenté sacar adelante una empresa de desarrollo. Las cosas no terminaron bien y tuve que hacer algo a lo que no estoy acostumbrado, buscar trabajo.&lt;/p&gt;

&lt;p&gt;Y fue precisamente cuando Carlos Blé se cruzó en mi camino. Casualmente Carlos estaba en Madrid por trabajo y coincidimos en un par de eventos de MSCoders. Me comentó que tal vez saliese un proyecto chulo en las Palmas y me preguntó si me interesaría ayudarles dedicando unos días de consultoría como experto en .Net.&lt;/p&gt;

&lt;p&gt;Al final el proyecto salió y, en lugar de unos días, terminó siendo una propuesta para un proyecto de un año, incluyendo los primeros 3 meses en presencial en Las Palmas y con visitas frecuentes el resto del año.&lt;/p&gt;

&lt;p&gt;Así que me vi de no tener curro, a tener dos ofertas: una de una entidad bancaria &amp;#8220;cerca&amp;#8221; de casa y la otra para un proyecto de un año, como autónomo, pasando un periodo bastante largo fuera de casa y teniendo que viajar bastante.&lt;/p&gt;

&lt;p&gt;El caso es que el proyecto de Canarias era muy interesante, para mi iba a ser todo un reto y se planteaba como una oportunidad única. Así que acepté la propuesta de Carlos y un mes después estaba compartiendo piso con él y con Fran en Las Palmas.&lt;/p&gt;

&lt;p&gt;Pasó el año en un suspiro y el proyecto se renovó para otro año, que ha vuelto a pasar en un suspiro.&lt;/p&gt;

&lt;p&gt;Han sido dos años muy intensos en los que he aprendido muchísimo y he desaprendido más todavía. Creo que nunca he aprendido tanto concentrado en tan poco tiempo. Y eso es algo que tengo que agradecerle a mucha gente:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A Alfredo, Carlos y Fran (que no ronca) por subir tanto el listón. Gracias a vosotros me siento como los hobbits al volver a la comarca. He crecido, mis estadísticas han subido y ahora tengo varios niveles más. Pero además tengo a tres compañeros de aventuras.&lt;/li&gt;
&lt;li&gt;A los trabajadores de Aida, la empresa que ha confiado en nosotros los últimos dos años. La evolución que hemos podido experimentar en todos ha sido un gran aliciente para seguir mejorando. No quiero hacerle el feo a nadie así que no daré nombres 😉&lt;/li&gt;
&lt;li&gt;Por orden de aparición, a Ronny, Miguel, Dani y Jose. Teneros como aprendices ha sido todo un reto. Tenéis tanta inquietud que rejuvenezco cuando paso tiempo con vosotros. Compartir piso con vosotros cuando voy a Canarias es como hacer un hackathon diario, pero me ha encantado.&lt;/li&gt;
&lt;li&gt;A Luis Rovirosa, aunque hemos podido compartir poco tiempo juntos, cada vez que lo hemos hecho me has hecho crecer un poquito.&lt;/li&gt;
&lt;li&gt;A Antonio de la Torre. Aunque nuestros caminos prácticamente se han cruzado, ha sido genial. Sólo lamento no haber podido coincidir más tiempo, porque no muchos pueden jactarse de haberme hecho cambiar de opinión tantas veces en tan poco tiempo. Tenemos que volver a compartir vagón bar en el tren camino de algún evento 😉&lt;/li&gt;
&lt;li&gt;A mi familia por tener tanta paciencia. Ha habido meses en los que he pasado mucho tiempo fuera de casa entre el trabajo y los eventos de la comunidad, pero me han apoyado siempre.&lt;/li&gt;
&lt;li&gt;A la comunidad, por ella conseguí trabajo hace dos años y por ella lo cambio ahora.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Me resulta raro dejar una empresa en la que soy feliz. Puede sonar raro que lo explique así, pero el cuerpo me pide aprovechar la oportunidad laboral que se me ha presentado. Salgo de Codesai orgulloso de haber formado parte de sus comienzos y con la convicción de que nuestros caminos se volverán a cruzar de una forma u otra.&lt;/p&gt;

&lt;p&gt;Lo mejor de todo, gracias a la comunidad podremos vernos y compartir teclado.&lt;/p&gt;

&lt;p&gt;Actualización: Mis compañeros de Codesai me han dedicado un]&lt;a href=&#34;http://www.codesai.com/2016/10/muchas-gracias-modesto/&#34;&gt;1&lt;/a&gt; de despedida. No puedo hacer otra cosa más que reiterar mi agradecimiento. Sois la bomba 😉&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>¿Cuánto cuesta llamar a un método?</title>
      <link>http://www.modestosanjuan.com.com/cuanto-cuesta-llamar-a-un-metodo/</link>
      <pubDate>Tue, 02 Aug 2016 00:03:45 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com.com/cuanto-cuesta-llamar-a-un-metodo/</guid>
      <description>

&lt;p&gt;Últimamente Twitter está siendo toda una fuente de inspiración. En esta ocasión el hilo culpable es &lt;a href=&#34;https://twitter.com/jcant0n/status/759081339098464257&#34;&gt;este&lt;/a&gt;. &lt;a href=&#34;https://twitter.com/jcant0n&#34;&gt;Javier Cantón&lt;/a&gt; hace un comentario respecto a la diferencia de rendimiento existente entre llamar a un método virtual versus llamar al mismo método a través de un interface.&lt;/p&gt;

&lt;p&gt;En este post no pienso hablar de lo malvadas que son las optimizaciones prematuras, asumo que el comentario de Javier tenía su contexto, así que me voy a quedar con la parte que me ha resultado curiosa. &lt;a href=&#34;https://twitter.com/luisruizpavon/status/759366097497886720&#34;&gt;Luis Ruiz Pavón nos comentó&lt;/a&gt; que hiciéramos este tipo de mediciones utilizando &lt;a href=&#34;https://github.com/PerfDotNet/BenchmarkDotNet&#34;&gt;BenchmarkDotNet&lt;/a&gt; y, como me habían surgido un par de dudas, me puse manos a la obra.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aviso importante:&lt;/strong&gt; las cifras de las mediciones como tal no tienen importancia, cada ordenador tardará una cantidad distinta de nanosegundos en efectuar cada operación, lo que es importante en este caso es observar el diferencial de tiempo que es necesario para ejecutar el método en cada circunstancia.&lt;/p&gt;

&lt;h2 id=&#34;llamada-directa-a-método-no-virtual&#34;&gt;Llamada directa a método no virtual&lt;/h2&gt;

&lt;p&gt;Javier comentaba que en su contexto le interesaban las llamadas a métodos virtuales vs interfaces, descartando las llamadas directas a un método no virtual. No obstante, por dar un poco de contexto respecto al rendimiento,  me parecía intersante medirlo. Una llamada directa a un método no virtual tarda tan poco que hay veces que no es capaz de medirlo y me dice que tarda 0.0000 nanosegundos. En algunas de las pruebas la mediana era de &lt;strong&gt;0.0025 ns&lt;/strong&gt;. En realidad este resultado se debe a que el Jit está haciendo un inline del método. Si decoramos el método con el atributo &lt;strong&gt;[MethodImpl(MethodImplOptions.NoInlining)]&lt;/strong&gt; para que &lt;strong&gt;no haga inline&lt;/strong&gt; (gracias Juanma), la mediana es de &lt;strong&gt;1.96 ns&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;directa-virtual-vs-interface&#34;&gt;Directa virtual vs Interface&lt;/h2&gt;

&lt;p&gt;En mi máquina, una llamada directa a un &lt;strong&gt;método virtual&lt;/strong&gt; tarda unos &lt;strong&gt;2.91 nanosegundos&lt;/strong&gt;. SI realizamos la misma llamada a través de un &lt;strong&gt;interface&lt;/strong&gt;, necesita &lt;strong&gt;3.82 nanosegundos&lt;/strong&gt; para cada operación.&lt;/p&gt;

&lt;p&gt;Como he dicho antes, no voy a entrar a valorar si ahorrar 1 nanosegundo por cada llamada a un método es algo importante o no, es una cuestión de contexto y estoy seguro de que hay contextos en los que puede ser importante.&lt;/p&gt;

&lt;p&gt;Si asumimos que estamos en un contexto en el que realmente nos importa no sufrir esta penalización, podríamos descartar el uso de interfaces, pero esto puede condicionarnos el diseño en muchos aspectos.&lt;/p&gt;

&lt;h2 id=&#34;clases-abstractas&#34;&gt;Clases abstractas&lt;/h2&gt;

&lt;p&gt;Pensando en cómo podría salvar ese problema y obtener un rendimiento como el de una llamada directa pero con las ventajas que da tener un interface, se me ocurrió la posibilidad de utilizar una clase abstracta. Es cierto que no es exactamente lo mismo utilizar una clase abstracta que un interface, pero aún así creo que demuestra mucho más la intencionalidad que recurrir a un método virtual.&lt;/p&gt;

&lt;p&gt;La duda era cuál sería el rendimiento de la llamada a través de una clase abstracta. ¿Sería equivalente al de un interface?&lt;/p&gt;

&lt;p&gt;Pues resultó que no. Según mis mediciones, cada llamada tarda unos &lt;strong&gt;2.88 nanosegundos&lt;/strong&gt;. Es más, tanto si llamaba a través de la clase abstracta como si llamaba a través de la implementación de la clase abstracta, los tiempos eran los mismos.&lt;/p&gt;

&lt;p&gt;Ojo, aunque en principio parece que es incluso más rápido que la llamada directa a un método virtual, creo que la diferencia es despreciable y que si repitiese las mediciones varias veces, se turnarían por ser la más rápida 😉&lt;/p&gt;

&lt;h2 id=&#34;reflection&#34;&gt;Reflection&lt;/h2&gt;

&lt;p&gt;Ya que estaba, por curiosidad medí el tiempo de hacer las llamadas utilizando reflexión, asumiendo que tenía cacheado el MethodInfo y midiendo únicamente el Invoke del método. Cada llamada tardaba &lt;strong&gt;272.87 nanosegundos&lt;/strong&gt;, un abismo comparado con los otros mecanismos.&lt;/p&gt;

&lt;h2 id=&#34;un-poco-más-de-detalle&#34;&gt;Un poco más de detalle&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/gulnor?lang=en&#34;&gt;Juanma&lt;/a&gt; me ha comentado, con toda la razón del mundo, que para este tipo de mediciones tan pequeñas resulta útil recurrir a histogramas. BenchmarkDotNet no tiene actualmente esta funcionalidad, pero lo que si proporciona es la desviación típica, que puede resultar útil para interpretar lo datos. Aquí están los resultados de la última medición efectuada:&lt;/p&gt;

&lt;div class=&#34;table-responsive&#34;&gt;
  &lt;table  style=&#34;width:100%; &#34;  class=&#34;easy-table easy-table-default &#34; border=&#34;0&#34;&gt;
    &lt;tr&gt;
      &lt;th &gt;
        Método
      &lt;/th&gt;
      
      &lt;th &gt;
        Mediana
      &lt;/th&gt;
      
      &lt;th &gt;
        Desviación
      &lt;/th&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td &gt;
        Directo no virtual
      &lt;/td&gt;
      
      &lt;td &gt;
        0.0025 ns
      &lt;/td&gt;
      
      &lt;td &gt;
        0.0853 ns
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td &gt;
        Direct no virtual no inline
      &lt;/td&gt;
      
      &lt;td &gt;
        1.9673 ns
      &lt;/td&gt;
      
      &lt;td &gt;
        0.1040 ns
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td &gt;
        Directo virtual
      &lt;/td&gt;
      
      &lt;td &gt;
        2.9151 ns
      &lt;/td&gt;
      
      &lt;td &gt;
        0.0917 ns
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td &gt;
        Interface
      &lt;/td&gt;
      
      &lt;td &gt;
        3.8213 ns
      &lt;/td&gt;
      
      &lt;td &gt;
        0.1464 ns
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td &gt;
        Abstract
      &lt;/td&gt;
      
      &lt;td &gt;
        2.8829 ns
      &lt;/td&gt;
      
      &lt;td &gt;
        0.1113 ns
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td &gt;
        Directo con reflexión
      &lt;/td&gt;
      
      &lt;td &gt;
        272.8738 ns
      &lt;/td&gt;
      
      &lt;td &gt;
        17.7846 ns
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;h1 id=&#34;conclusión&#34;&gt;Conclusión&lt;/h1&gt;

&lt;p&gt;Si alguna vez nos preocupa tantísimo el rendimiento, podemos utilizar una clase abstracta en lugar de un interface (ya, ya he dicho antes que no es lo mismo).&lt;/p&gt;

&lt;p&gt;Cualquier excusa es buena para calentarse un poco la cabeza y sacar unos cuantos datos peculiares.&lt;/p&gt;

&lt;p&gt;Este tipo de posts no valen prácticamente para nada, pero el datap0rn tiene su gracia y me ha resultado muy entretenido escribirlo.&lt;/p&gt;

&lt;p&gt;BenchmarkDotNet mola, aunque tarda cojón y medio en hacer cada medición 😀&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Claves primarias: inmutabilidad y generación</title>
      <link>http://www.modestosanjuan.com.com/claves-primarias-inmutabilidad-y-generacion/</link>
      <pubDate>Sat, 30 Jul 2016 23:39:11 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com.com/claves-primarias-inmutabilidad-y-generacion/</guid>
      <description>

&lt;p&gt;Hace unos días &lt;a href=&#34;https://twitter.com/Pablyte/status/754056720666730500&#34;&gt;Pablo Iglesias&lt;/a&gt; &lt;a href=&#34;https://twitter.com/Pablyte/status/754056720666730500&#34;&gt;tuiteó&lt;/a&gt; una pregunta de Stack Exchange en la que hablaban sobre la inmutabilidad de las claves primarias. Se generó un debate bastante interesante en Twitter que se extendió más allá de la cuestión de la inmutabilidad. Este es un intento de recopilar y explicar algunos de los conceptos que se mencionaron durante ese debate.&lt;/p&gt;

&lt;h1 id=&#34;claves-primarias-mutables-o-inmutables&#34;&gt;Claves primarias mutables o inmutables&lt;/h1&gt;

&lt;p&gt;Para el que ande un poco perdido con el concepto, básicamente se trata de determinar si la clave primaria de una entidad debería poder cambiar o no una vez establecida. Por ejemplo: si me registro en un servicio online y utilizan mi email como PK, si el servicio me da la opción de cambiar mi cuenta de correo, la PK es mutable. Esto significa que en todos los sitios en los que el servicio se esté persistiendo mi email como PK va a tener que actualizar el dato para constatar el cambio. Independientemente de que usemos o no foreign keys, esto es un foco de dolor, especialmente si utilizamos distintos mecanismos de persistencia de datos. Si además nuestro software cuenta con funcionalidades como con auditar los cambios o cualquier tipo de integración con sistemas externos como herramientas de CRM y similar, tener PKs mutables se puede convertir en algo imposible.&lt;/p&gt;

&lt;p&gt;Parece que hubo un consenso generalizado respecto a que las PK deberían ser inmutables, así que no me voy a extender más en este punto.&lt;/p&gt;

&lt;h1 id=&#34;claves-subrogadas-o-naturales&#34;&gt;Claves subrogadas o naturales&lt;/h1&gt;

&lt;p&gt;Cuando usamos una clave natural, el valor de la clave está relacionado con los datos que identifica. Por ejemplo, si estamos identificando libros, el ISBN podría ser un candidato a PK. El número de bastidor para un coche, número de serie de un ordenador, la MAC de una tarjeta de red, el número de una factura, etc. En resumen, utilizamos un dato del negocio para identificar nuestras entidades al persistirlas.&lt;/p&gt;

&lt;p&gt;Si, por otro lado, elegimos usar una clave subrogada, lo que estamos haciendo es generar un identificador único que no tiene nada que ver con los datos que identifica, pero se garantiza a nivel infraestructura que el dato es único.&lt;/p&gt;

&lt;p&gt;Aunque siempre pongo un gran &amp;#8220;depende&amp;#8221; y no soy muy amigo de las afirmaciones absolutas, la realidad es que llevo años utilizando claves subrogadas porque la experiencia me ha demostrado que suele ser una mala idea utilizar datos del negocio. La razón es muy sencilla: el negocio cambia.&lt;/p&gt;

&lt;p&gt;Ejemplos hay miles. Por tomar uno, &lt;a href=&#34;https://twitter.com/panicoenlaxbox&#34;&gt;Sergio León&lt;/a&gt; mencionaba los ISBN de los libros. Desarrollando un software para gestionar liberías podríamos pensar que el ISBN debería valernos, pero los libros muy viejos no tienen ISBN. Así que si de repente al librero le diese por dedicarse a vender libros antiguos de colección, tendríamos un problema importante. Ese tipo de situaciones se dan con mucha frecuencia y siempre cuando el desarrollo ya está bastante avanzado, que es cuando más daño hacen.&lt;/p&gt;

&lt;p&gt;Como el ejemplo del ISBN hay muchos y debemos tener en cuenta el coste del cambio. Hay quién podría utilizar el argumento de que es un error pensar en el futuro y que usar una clave subrogada es una decisión prematura basada en anticiparse a un posible cambio de negocio que no sabemos si alguna vez va a suceder. En esas circunstancias suele ser un buen ejercicio pensar en cuál sería el coste del cambio en el futuro frente al coste de usar una clave subrogada en el presente. Si lo pensamos en términos económicos, utilizar una clave natural podría implicar estar firmando una hipoteca muy cara.&lt;/p&gt;

&lt;p&gt;Además, como indicaba &lt;a href=&#34;https://twitter.com/pmolinam&#34;&gt;Pedro J. Molina&lt;/a&gt;, &amp;#8220;Si vas por clave natural acaba uno fácilmente con claves compuestas. Las de 4 campos ya no hacen gracia&amp;#8221;. Pero es que encima eso termina tocando mucho las narices cuando llega el momento de &amp;#8220;enchufarte&amp;#8221; a otras cosas. Es típico que el servicio que te permite asociar comentarios, likes, etc. te pida que le des un identificador único de tu entidad y nos podríamos volver locos buscando ejemplos que nos llevan a desear trabajar siempre con una clave subrogada.&lt;/p&gt;

&lt;h2 id=&#34;generación-de-las-claves-subrogadas&#34;&gt;Generación de las claves subrogadas&lt;/h2&gt;

&lt;p&gt;Venga, vamos a suponer que a estas alturas ya estamos convencidos de que vamos a identificar a nuestras entidades con claves inmutables y subrogadas al menos algunas veces. ¿Cómo las generamos? Este punto también generó debate y en este caso no había unanimidad ni de lejos.&lt;/p&gt;

&lt;p&gt;Para generar una clave subrogada podemos optar por dejar que la base de datos la genere por nosotros automáticamente cuando insertamos el registro o podemos ser nosotros desde el código los que proporcionemos la clave a la base de datos.&lt;/p&gt;

&lt;p&gt;La opción clásica es que la base de datos genere el identificador por ti y listo. Podemos usar un identity, secuencia o lo que nos proporcione la base de datos que utilicemos y no nos complicamos mucho la vida. Pero hay escenarios en los que nos podría interesar recurrir a otro tipo de mecanismos.&lt;/p&gt;

&lt;h2 id=&#34;mecanismos-para-la-generación-de-claves-subrogadas&#34;&gt;Mecanismos para la generación de claves subrogadas&lt;/h2&gt;

&lt;p&gt;Aunque podríamos ponernos muy creativos de cara a la generación de nuestras claves, hay ciertos mecanismos predominantes. No voy a posicionarme respecto a ninguno porque creo que su utilización depende mucho de los requisitos del negocio y de la infraestructura de la aplicación.&lt;/p&gt;

&lt;h3 id=&#34;guids&#34;&gt;Guids&lt;/h3&gt;

&lt;p&gt;Generar Guids es algo sencillo, se puede hacer desde cualquier sitio y las posibilidades de colisión son absolutamente despreciables. En principio es un mecanismo interesante ya que nos permite tener el control desde el negocio y no depender de la base de datos para su generación. Además, entre sus virtudes podemos considerar que al usar un Guid estamos utilizando un identificador no sólo a la tabla, también entre todas las tablas e incluso entre varias bases de datos. Esto habilita con mucha más facilidad escenarios de &amp;#8220;merge&amp;#8221; en los que queremos juntar datos que provienen de varias fuentes.&lt;/p&gt;

&lt;p&gt;Por supuesto, también tiene sus contras, entre ellos que un Guid ocupa muchísimo más que una clave numérica y además &lt;a href=&#34;http://sqlmag.com/database-performance-tuning/clustered-indexes-based-upon-guids&#34;&gt;afecta negativamente&lt;/a&gt; al rendimiento de los índices clustered.&lt;/p&gt;

&lt;p&gt;Hay mucha literatura sobre este tema en internet, incluyendo algunos intentos de análisis sobre la diferencia desde el punto de vista de rendimiento. Además debemos tener en cuenta que la implementación de base de datos que utilicemos influye muchísimo. Como ejemplo, no es lo mismo usar &lt;a href=&#34;http://krow.livejournal.com/497839.html&#34;&gt;MySQL&lt;/a&gt; que &lt;a href=&#34;http://www.informit.com/articles/printerfriendly/25862&#34;&gt;SQL Server&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;numérico-autoincrementado&#34;&gt;Numérico autoincrementado&lt;/h3&gt;

&lt;p&gt;Este mecanismo es uno de los más frecuentes y creo que no necesita mucha explicación. El standard SQL:2003 define los tipos IDENTITY y SEQUENCE pero dependemos de la base de datos que estemos utilizando. Por ejemplo, en MySQL está el AUTO_INCREMENT y en PostgreSQL también está el SERIAL (creo que es &amp;#8220;azucar sintáctico&amp;#8221; para definir un SEQUENCE).&lt;/p&gt;

&lt;h3 id=&#34;hilo&#34;&gt;HiLo&lt;/h3&gt;

&lt;p&gt;A grandes rasos, con HiLo la aplicación reserva con antelación en la base de datos un rango de identificadores que serán utilizados necesite insertar nuevos registros en la base de datos. Cuando la aplicación ha usado todos los identificadores, va a la base de datos y reserva más. NHibernate usa esta técnica y también es posible usarla en Entity Framework. Entre sus ventajas está que nos permite utilizar identificadores de tipo numérico (para los que demandan rendimiento) y entre las desventajas que genera &amp;#8220;lagunas&amp;#8221; entre los identificadores generados. Si una aplicación reserva los identificadores del 1 al 10 y luego usa únicamente 5, los identificadores de 6 al 10 quedarán sin usar.&lt;/p&gt;

&lt;h3 id=&#34;dependiendo-de-un-tercero&#34;&gt;Dependiendo de un tercero&lt;/h3&gt;

&lt;p&gt;Consiste en delegar en un tercero la estrategia de generación de nuestra clave. Desde nuestra aplicación, cuando queramos identificar una entidad, llamaremos a este servicio externo y nos proporcionará una identidad que será la que luego persistiremos.&lt;/p&gt;

&lt;p&gt;Cuando estamos haciendo HiLo, en parte estamos utilizando este mecanismo. Aunque sea nuestra base de datos la que genera los identificadores, en realidad es un tercero (la clase que gestiona el algoritmo) el que nos los está proporcionando.&lt;/p&gt;

&lt;p&gt;Un ejemplo (raro pero real) es utilizarlo cuando la persistencia se realiza sobre mecanismos que no tienen soporte de autonuméricos, delegando la generación del autonumérico sobre un tercero para luego persistir el dato. Otro escenario de uso sería si necesitamos asegurarnos de que nuestros identificadores son únicos entre varios sistemas y además queremos aplicar reglas especiales para su generación.&lt;/p&gt;

&lt;p&gt;Siendo realistas, es un mecanismo que añade complejidad y no es necesario la mayoría de las veces, pero no deja de ser interesante mencionarlo.&lt;/p&gt;

&lt;h2 id=&#34;cuál-uso&#34;&gt;¿Cuál uso?&lt;/h2&gt;

&lt;p&gt;Según las respuestas a la conversación que originó el debate, una gran mayoría respondería &amp;#8220;secuencias numéricas autoincrementadas y no me complico&amp;#8221;. No les falta razón, pero hay veces que complicarnos es la opción menos complicada. Complicado, eh? 😉&lt;/p&gt;

&lt;p&gt;Existen muchas razones que podrían llevarnos a querer complicarnos la vida y no pretendo hacer un estudio detallado, pero al menos quiero poner algunos ejempos comunes.&lt;/p&gt;

&lt;h3 id=&#34;cqs&#34;&gt;CQS&lt;/h3&gt;

&lt;p&gt;Si queremos usar &lt;a href=&#34;http://martinfowler.com/bliki/CommandQuerySeparation.html&#34;&gt;CQS&lt;/a&gt; (Command-Query Separation) partimos del principio de que nuestros comandos no devuelven nada. Si tenemos un comando que inserta una entidad, deberíamos saber el id de la entidad que estamos insertando antes de llamar al propio comando, ya que el comando no va a devolvernos nada.&lt;/p&gt;

&lt;p&gt;Podríamos pensar que tampoco pasa nada porque un comando de inserción devuelva un valor y ya está. No voy a entrar a valorar esto, pero en cuanto queramos que el modelo de ejecución de nuestros comandos sea asíncrono (a través de una cola o similar), volvemos al problema inicial.&lt;/p&gt;

&lt;h3 id=&#34;modo-offline&#34;&gt;Modo offline&lt;/h3&gt;

&lt;p&gt;Si nuestra aplicación tiene como requisito de negocio proporcionar la posibilidad trabajar offline, recurrir al servidor de base de datos para obtener el id de una entidad no es una opción.&lt;/p&gt;

&lt;p&gt;Imaginemos una aplicación como Evernote. Cuando creemos una nueva nota y no tengamos conexión, ¿qué identificador tendrá esa nota entonces? Si generamos ese identificador desde el código (mediante, por ejemplo, un GUID) podremos realizar la sincronización fácilmente una vez tengamos conexión.&lt;/p&gt;

&lt;p&gt;Aunque en el caso de CQS, HiLo podría ser una opción perfectamente válida, en este caso sería la opción menos recomendada ya que tendríamos la necesidad de conectarnos al servidor de base de datos si creamos tantas entidades que agotamos nuestro &amp;#8220;cupo&amp;#8221; de identificadores.&lt;/p&gt;

&lt;h3 id=&#34;si-no-usamos-sql&#34;&gt;Si no usamos SQL&lt;/h3&gt;

&lt;p&gt;Este caso es ignorado por muchos desarrolladores cuyo contexto profesional se limita a bases de datos SQL para persistir información. Cuando salimos del mundo SQL, muchísimos mecanismos de persistencia piden que seamos nosotros desde el código los que proporcionemos nuestros identificadores. Como ejemplo &amp;#8220;primitivo&amp;#8221; a la par que útil, si persistimos en disco tendremos que proporcionar nosotros el identificador de nuestra entidad (nombre del archivo).&lt;/p&gt;

&lt;h1 id=&#34;conclusiones&#34;&gt;Conclusiones&lt;/h1&gt;

&lt;p&gt;Tenemos multitud de mecanismos para identificar nuestras entidades. Debemos conocerlos bien y hacer un uso inteligente de ellos en función de nuestros requisitos de negocio, pero nunca complicarnos la vida innecesariamente.Y muy importante, que el rendimiento únicamente sea un argumento cuando tenemos requisitos no funcionales que nos hablan de rendimiento. Hablar de rendimiento cuando no tienes requisitos relacionados con el rendimiento suele ser foco de optimizaciones prematuras.&lt;/p&gt;

&lt;p&gt;Y con esto creo que termino el &amp;#8220;resumen&amp;#8221; de las cosas que se comentaron en el hilo de Twitter y algunas de las que pasaron por mi cabeza. Seguro que me dejo en el tintero muchas observaciones y muchos matices, me conformo si a alguien le vale para entender que hay vida más allá de los identificadores mutables naturales 😀&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Palabras malditas</title>
      <link>http://www.modestosanjuan.com.com/palabras-malditas/</link>
      <pubDate>Mon, 13 Jun 2016 10:02:56 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com.com/palabras-malditas/</guid>
      <description>

&lt;h1 id=&#34;extreme-programming-y-el-desarrollo-ágil&#34;&gt;Extreme programming y el desarrollo ágil&lt;/h1&gt;

&lt;p&gt;A principios de siglo (dicho así parece que queda muy atrás, eh&amp;#8230; :P) trabajaba en Indra como coordinador de un equipo de desarrollo. En mi entorno profesional era un poco como un bicho raro porque, además de ser 10 años más joven que la media de mi puesto, era de los pocos que se negaba a abandonar el desarrollo para dedicarme plenamente a la gestión.&lt;/p&gt;

&lt;p&gt;Recuerdo que en esa época leí sobre Extreme Programming y me pareció muy interesante. He de reconocer que por aquel entonces no entendí bien la parte de programar en pareja y seguro que malentendí otras partes, pero empaticé con los valores que promovía y algunas prácticas casualmente ya las llevábamos aplicando en nuestro día a día desde los inicios del equipo.&lt;/p&gt;

&lt;p&gt;En una ocasión un compañero me vino a buscar y justo estaba leyendo sobre el tema. Sus primeras reacciones al leer las palabras &amp;#8220;Extreme Programming&amp;#8221; fueron del tipo: &amp;#8220;¿programación extrema? ¡aquí no queremos cosas extremas!&amp;#8221;. Le comenté que era un proceso ágil que&amp;#8230; &amp;#8220;ágil, ah! vale, eso ya me gusta más&amp;#8221; y el resto de la historia ya da igual.&lt;/p&gt;

&lt;h1 id=&#34;el-freelance-y-el-profesional-independiente&#34;&gt;El freelance y el profesional independiente&lt;/h1&gt;

&lt;p&gt;El año pasado di una charla en una comunidad de desarrollo y puse en mi bio que era desarrollador freelance. Tengo un conflicto personal con este tipo de &amp;#8220;biografías&amp;#8221; porque me obligan a definirme y es algo que me suele resultar incómodo, especialmente cuando estoy en un periodo de transición en el que lo que soy no lo termino de tener claro ni yo mismo. El caso es que alguien me comentó: &amp;#8220;no pongas freelance, que es una palabra que tiene connotaciones negativas, pon mejor que eres profesional independiente&amp;#8221;.&lt;/p&gt;

&lt;h1 id=&#34;el-problema-de-discutir-sobre-la-palabra&#34;&gt;El problema de discutir sobre la palabra&lt;/h1&gt;

&lt;p&gt;He mencionado estas dos anécdotas precisamente porque para mi son dos ejemplos del mismo problema con 15 años de separación. Cargamos de tanto significado, connotaciones y prejuicios ciertas palabras que al final terminamos adorando u odiando las palabras en si mismas independientemente del significado que tengan para la persona que las utiliza.&lt;/p&gt;

&lt;p&gt;Durante el fin de semana vi la charla de David Bonilla sobre &amp;#8220;El programador Moderno&amp;#8221; y me gustó bastante, aunque no coincidí para nada con él respecto a su interpretación de la metáfora del Software Craftsmanship. Básicamente David interpreta que la escuela craftsman dice que &amp;#8220;los programadores de verdad son los que hacen un código que podría pasar cualquier tipo de inspección, que lo que importa es que perfecciones tu práctica de la programación hasta llegar a ser un artesano del software&amp;#8221;. El problema es que para mi está haciendo una interpretación que diverge completamente de la que yo hago sobre la metáfora del Software Craftsmanship.&lt;/p&gt;

&lt;p&gt;¿Está David equivocado?¿Lo estoy yo? Creo que la equivocación es discutir sobre la metáfora. Estoy seguro de que hay personas que interpretan el movimiento de Software Craftsmanship como lo hace David en su vídeo, otras que lo interpretan como yo muchas otras que lo interpretan de formas completamente distintas.&lt;/p&gt;

&lt;p&gt;Lo curioso es que el manifiesto del Software Craftsmanship dice únicamente esto:&lt;/p&gt;

&lt;blockquote&gt;
&lt;div class=&#34;left&#34;&gt;
  Not only working software,
&lt;/div&gt;

&lt;div class=&#34;right&#34; style=&#34;padding-left: 60px;&#34;&gt;
  but also &lt;strong&gt;&lt;span class=&#34;value&#34;&gt;well-crafted software&lt;/span&gt;&lt;/strong&gt;
&lt;/div&gt;

&lt;div class=&#34;left&#34;&gt;
  Not only responding to change,
&lt;/div&gt;

&lt;div class=&#34;right&#34; style=&#34;padding-left: 60px;&#34;&gt;
  but also &lt;strong&gt;&lt;span class=&#34;value&#34;&gt;steadily adding value&lt;/span&gt;&lt;/strong&gt;
&lt;/div&gt;

&lt;div class=&#34;left&#34;&gt;
  Not only individuals and interactions,
&lt;/div&gt;

&lt;div class=&#34;right&#34; style=&#34;padding-left: 60px;&#34;&gt;
  but also &lt;strong&gt;&lt;span class=&#34;value&#34;&gt;a community of professionals&lt;/span&gt;&lt;/strong&gt;
&lt;/div&gt;

&lt;div class=&#34;left&#34;&gt;
  Not only customer collaboration,
&lt;/div&gt;

&lt;div class=&#34;right&#34; style=&#34;padding-left: 60px;&#34;&gt;
  but also &lt;strong&gt;&lt;span class=&#34;value&#34;&gt;productive partnerships&lt;/span&gt;&lt;/strong&gt;
&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;¿Quién no puede estar de acuerdo con este manifiesto? ¡Sólo le falta un &amp;#8220;making the world a better place&amp;#8221;! 😉&lt;/p&gt;

&lt;h1 id=&#34;el-peligro-de-criticar-la-palabra-en-lugar-de-las-prácticas&#34;&gt;El peligro de criticar la palabra en lugar de las prácticas&lt;/h1&gt;

&lt;p&gt;Desde mi punto de vista, el mayor problema que suele acompañar a la crítica de una metáfora, es que no criticas algo concreto, criticas la interpretación que cada persona tenga de esa palabra. Y el mayor problema es el daño que puedes estar haciendo al colectivo que se identifica con esa metáfora, pero que interpreta la metáfora de una forma distinta a la que tú lo haces.&lt;/p&gt;

&lt;p&gt;El ejemplo de David no es el primero ni será el último. En la CAS del 2015, Leo Antoli hace referencia en &lt;a href=&#34;https://www.youtube.com/watch?v=XSUaoBdfmsY&#34;&gt;su keynote&lt;/a&gt; a varias metáforas, la del Software Craftsmanship entre ellas. Lo curioso es que en este caso puso una foto de Manolo y Benito, de la serie &amp;#8220;Manos a la obra&amp;#8221;. No se realmente cuál era el mensaje que quería dar Leo en este caso, pero imagino que si alguien pone en una presentación un slide con su empresa, su nombre, o el de un colectivo con el que se identifica y debajo la imagen de un par de chapuzas, no le haría mucha gracia.&lt;/p&gt;

&lt;p&gt;Volviendo al vídeo de David, cualquiera que vea su charla y no tenga idea de qué es eso del Software Craftsmanship, puede que herede el pensamiento de que son un grupo de gente que sólo se preocupan de que su código sea tan limpio que se pueda comer encima. Un poco más adelante David anima al público a que se involucren en la comunidad, asistan a meetups, etc. Supongo pocos asistentes de esa charla se animarán a ir a estos &lt;a href=&#34;http://www.meetup.com/topics/software-craftsmanship/&#34;&gt;meetups&lt;/a&gt; 🙁&lt;/p&gt;

&lt;h1 id=&#34;da-feedback-útil-que-no-te-ciegue-la-ira&#34;&gt;Da feedback útil, que no te ciegue la ira 😉&lt;/h1&gt;

&lt;p&gt;¿Leo o David son malas personas y habría que sacrificarlas ante el dios del Software Craftsmanship? Pues tampoco. Al final son dos personas que han tenido la oportunidad de enviar un mensaje importante y lo han hecho de la mejor manera que han sabido/podido. No me he visto nunca en la tesitura de dar una charla de este tipo, pero imagino que no tiene que ser fácil.&lt;/p&gt;

&lt;p&gt;Comunicar no es fácil, muestra de ello es este post, que seguro que me ha quedado un coñazo infumable que no expresa ni la mitad de lo que quería decir. Por eso creo que es muy importante el feedback. Si tienes la oportunidad de dar feedback, no lo dudes, pero desde el respeto. Por ejemplo, a David le respondí a través de &lt;a href=&#34;https://twitter.com/david_bonilla/status/741555880404082689&#34;&gt;Twitter&lt;/a&gt; y espero poder continuar la charla un día con unas cervezas. A Leo se lo di en la CAS, justo después de la keynote, y creo que fue un error porque seguro que ni se acuerda de lo que hablamos xD&lt;/p&gt;

&lt;p&gt;A todo esto, a mi en realidad la metáfora del Software Craftsmanship tampoco me va, yo soy jardinero del software! 😉&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Presta atención a tus datos de pruebas</title>
      <link>http://www.modestosanjuan.com.com/presta-atencion-a-tus-datos-de-pruebas/</link>
      <pubDate>Mon, 29 Feb 2016 23:04:10 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com.com/presta-atencion-a-tus-datos-de-pruebas/</guid>
      <description>

&lt;p&gt;Los datos utilizados en las pruebas son muy importantes y, aunque el tema de este post parece muy obvio, no son pocas la veces que me he encontrado con problemas debido a este tema, así que creo que merece la pena dedicarle al menos unas líneas.&lt;/p&gt;

&lt;p&gt;Hay varios aspectos que son importantes a tener en cuenta al definir datos para nuestras pruebas automáticas. En este post me voy a centrar en tres errores que me encuentro con frecuencia:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Datos diferentes con los mismos valores&lt;/li&gt;
&lt;li&gt;Exceso de datos innecesarios para el test&lt;/li&gt;
&lt;li&gt;Utilización de datos que dan lugar a confusión&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;datos-diferentes-con-los-mismos-valores&#34;&gt;Datos diferentes con los mismos valores&lt;/h2&gt;

&lt;p&gt;Este problema se da especialmente cuando hablamos de datos numéricos, ya que son los más susceptibles de ser repetidos en los tests. Supongamos que queremos probar un método que nos permite dividir dos números y obtener el resultado (un ejemplo muy original, eh? ;P). Un claro ejemplo de una prueba con datos incorrectos sería este:&lt;/p&gt;

&lt;pre class=&#34;lang:c# decode:true &#34;&gt;[Test]
public void Divide() {
    var result = Divide(2, 2);
    result.Should().Be(1);
}&lt;/pre&gt;

&lt;p&gt;Teniendo en cuenta los datos de este test, es perfectamente posible confundir el dividendo y el divisor porque al invertirlos el resultado es el mismo. No sólo se dificulta la lectura del test, es que una implementación podría darnos un falso verde.&lt;/p&gt;

&lt;p&gt;Evidentemente este ejemplo es muy básico, pero este tipo de errores se comete con bastante frecuencia cuando tenemos identificadores numéricos, valores para expresar cantidades o fechas. Es típico utilizar &amp;#8220;1&amp;#8221; como identificador numérico pero cuando tenemos que hacer una prueba con el usuario con id 1 de la empresa 1 es muy importante pararnos unos segundos y buscar datos que no puedan ser confundidos.&lt;/p&gt;

&lt;h2 id=&#34;exceso-de-datos-innecesarios-para-el-test&#34;&gt;Exceso de datos innecesarios para el test&lt;/h2&gt;

&lt;p&gt;Otro de los problemas habituales es proporcionar más datos de los estrictamente necesarios para el objetivo de nuestro test. Si estamos escribiendo un tests para verificar el funcionamiento de un API que puede recibir varios parámetros pero algunos son obligatorios y otros opcionales, lo recomendable es que creemos varios tests para contemplar desde el escenario más básico a los escenarios más complejos. Supongamos que tenemos una calculadora de descuentos para clientes que necesita recibir como parámetro un cliente que tenga un identificador, país de procedencia y actividad para poder calcular su descuento correspondiente.&lt;/p&gt;

&lt;pre class=&#34;lang:default decode:true&#34;&gt;var client = GivenAClient (Id:1, Name:&#34;Peter&#34;, Country:&#34;Spain&#34;, Activity:&#34;Development&#34;, Sector:&#34;Software&#34;);
discountCalculator.CalculateFor(client);&lt;/pre&gt;

&lt;p&gt;Leyendo este ejemplo parece que un cliente necesita todos los campos para poder calcular un descuento, pero estamos especificando el &lt;em&gt;sector&lt;/em&gt; y resulta que era irrelevante, lo que pasa es que nuestro afán de reutilización nos ha jugado una mala pasada. Si asumimos que nuestros tests pueden servir como documentación para otros desarrolladores (o incluso para nuestro yo del futuro), cuanto más concisos seamos con esta información, mejor.&lt;/p&gt;

&lt;h2 id=&#34;utilización-de-datos-que-dan-lugar-a-confusión&#34;&gt;Utilización de datos que dan lugar a confusión&lt;/h2&gt;

&lt;p&gt;En otras ocasiones tenemos datos de presencia necesaria pero de valor irrelevante para la ejecución del test. Es importante que en el test quede claro que el valor nos da igual y que no influye en la ejecución del test. En este caso las consecuencias pueden ser similares al punto anterior ya que el test puede generar confusión al leerlo.&lt;/p&gt;

&lt;pre class=&#34;lang:c# decode:true&#34;&gt;var client = GivenAClient (Id:1, Name:&#34;Peter&#34;, Country:&#34;Spain&#34;, Activity:&#34;Development&#34;);
discountCalculator.CalculateFor(client);&lt;/pre&gt;

&lt;p&gt;Al leer este código podríamos pensar que el país y la actividad son relevantes para el cálculo del descuento únicamente porque estamos utilizando valores específicos. Pero, ¿qué pasa si recurrimos a valores genéricos excepto cuando realmente el valor es relevante?&lt;/p&gt;

&lt;pre class=&#34;lang:c# decode:true&#34;&gt;var client = GivenAClient (Id:Any.Id, Name:Any.Name, Country:&#34;Spain&#34;, Activity:Any.Activity);
discountCalculator.CalculateFor(client);&lt;/pre&gt;

&lt;p&gt;Con este pequeño cambio queda mucho más clara la información relevante para el test y tanto los compañeros como nuestro yo del futuro lo agradecerá mucho.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Impresiones sobre pair programming</title>
      <link>http://www.modestosanjuan.com.com/impresiones-sobre-pair-programming/</link>
      <pubDate>Tue, 19 Jan 2016 01:13:56 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com.com/impresiones-sobre-pair-programming/</guid>
      <description>

&lt;p&gt;El viernes mantuve una conversación bastante entretenida sobre desarrollo de software con un compañero de profesión. Trabaja en una entidad financiera y al hablar de cosas como TDD, Agile, XP, etc. tenía ciertos sentimientos enfrentados. Precisamente uno de los temas que le causaban controversia era el pair programming. Su opinión básicamente se resumía en una frase: &amp;#8220;yo lo que no compro es que dos tíos senior sentados juntos a programar van a ser más productivos que si programan por separado&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Así que me he animado a escribir un post con mi opinión sobre este tema y aportar así mi punto de vista (aunque a nadie le importe xD).&lt;/p&gt;

&lt;h1 id=&#34;antecedentes&#34;&gt;Antecedentes&lt;/h1&gt;

&lt;p&gt;Me encanta programar solo. Disfruto muchísimo sentado delante del teclado mientras me enfrento a un reto técnico o busco una aproximación de diseño que me convenza. También me encanta pasarme horas leyendo código de proyectos open source para ver cómo hacen las cosas otros equipos de desarrollo. Disfruto haciendo generadores de código que generan código para generar generadores de código. En resumen, me encanta liarme la manta a la cabeza y perderme las horas muertas en todo lo que tenga que ver con el desarrollo de software.&lt;/p&gt;

&lt;p&gt;Pero que me guste no significa que piense que sea lo mejor cuando hablo de un contexto profesional. El desarrollo de software no es únicamente mi profesión, es mi afición. Por eso todas estas cosas que me gustan, las hago principalmente cuando tengo libre y, cuando estoy trabajando, decido lo que hacer buscando el criterio que más le convenga al proyecto.&lt;/p&gt;

&lt;p&gt;Actualmente llevo algo más de un año trabajando en un proyecto en el que hacemos mucho pair programming, así que no puedo decir que sea un veterano en esto, pero creo que ha pasado un tiempo lo suficientemente grande como para tener una opinión desde la experiencia.&lt;/p&gt;

&lt;h1 id=&#34;lo-bueno&#34;&gt;Lo bueno&lt;/h1&gt;

&lt;p&gt;Para mi los aspectos positivos más interesantes de esta práctica son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Beneficia a la &lt;strong&gt;propiedad colectiva del código&lt;/strong&gt;.- Esto facilita la eliminación del efecto &amp;#8220;es que eso lo hizo fulanito y sólo él puede meterle mano&amp;#8221;. Si además de pair programming, introducimos rotación dentro de los equipos, el beneficio es aún mayor.&lt;/li&gt;
&lt;li&gt;El &lt;strong&gt;código es mejor&lt;/strong&gt;.- Nada como 4 ojos pendientes del código que se está generando. Como mínimo, permitirá garantizar que al menos que ha existido consenso entre dos de cara a la legibilidad, diseño y estructura del código.&lt;/li&gt;
&lt;li&gt;Las &lt;strong&gt;pruebas&lt;/strong&gt; son &lt;strong&gt;mejores&lt;/strong&gt;.- Me cuesta recordar una sesión de pair programming en la que, fruto del diálogo entre ambas partes, no haya surgido algún test de triangulación para probar un caso límite.&lt;/li&gt;
&lt;li&gt;Promueve la definición y utilización del &lt;strong&gt;lenguaje ubícuo&lt;/strong&gt;.- Cuando programas solo prestas menos atención a los nombres y, aunque se la prestes, careces de una figura muy importante de cara a encontrar el nombre más adecuado, el debate.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;lo-malo&#34;&gt;Lo malo&lt;/h1&gt;

&lt;p&gt;Como todo, también tiene algunos aspectos negativos, para mi estos son los principales:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Es &lt;strong&gt;difícil&lt;/strong&gt; practicarlo correctamente.- Quien piense que el pair programming se limita a que dos tíos se sienten al lado y se intercambien el teclado, va muy desorientado. Al final pondré algunos enlaces con consejos al respecto.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fatiga&lt;/strong&gt;.- Si, 4 horas de pairing cansan mucho. Y más si no se practica bien. Un truco, es importante respetar los descansos o el cerebro termina frito.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;cuándo&#34;&gt;¿Cuándo?&lt;/h1&gt;

&lt;p&gt;Dicho esto, tampoco creo que deba hacerse el 100% del tiempo. Creo que esta práctica aporta mucho valor cuando estamos hablando de escribir código de negocio y mucho menos cuando hablamos de UI e infraestructura. Cuando hablamos de dominios que estamos explorando y es evidente que el cuello de botella no va a ser el ritmo al que escribamos código, es precisamente uno de los escenarios en los que más beneficios nos va a proporcionar esta práctica.&lt;/p&gt;

&lt;p&gt;Normalmente no me parece práctico recurrir al pair programming para escribir código de infraestructura o código de una vista. A no ser que estemos haciendo mentoring, pero eso sería otro tema.&lt;/p&gt;

&lt;p&gt;Por supuesto, siempre hay excepciones y ya sabemos que la respuesta casi siempre es &amp;#8220;depende&amp;#8221;.&lt;/p&gt;

&lt;h1 id=&#34;más-información&#34;&gt;Más información&lt;/h1&gt;

&lt;p&gt;Sobre el tema hay mucho escrito, pero tengo recientes en mi cabeza estos dos posts que a su vez enlazan a otro montón de ellos:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://juandavidvega.es/blog/?p=194&#34; target=&#34;_blank&#34;&gt;Pair programming: Mi guía práctica&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.carlosble.com/2015/07/productive-pair-programming/&#34; target=&#34;_blank&#34;&gt;Productive Pair Programming&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nuestra programación es mala para el desarrollo de software</title>
      <link>http://www.modestosanjuan.com.com/nuestra-programacion-es-mala-para-el-desarrollo-de-software/</link>
      <pubDate>Mon, 28 Dec 2015 22:22:29 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com.com/nuestra-programacion-es-mala-para-el-desarrollo-de-software/</guid>
      <description>

&lt;h1 id=&#34;la-programación-de-mi-color-favorito&#34;&gt;La programación de mi color favorito&lt;/h1&gt;

&lt;p&gt;El otro día mi hija me preguntó cuál era mi color favorito. Respondí inmediatamente sin pensarlo: &amp;#8220;el azul&amp;#8221;. No era la primera vez que me lo preguntaban y es un dato que tengo claro desde que era niño. O no.&lt;/p&gt;

&lt;p&gt;En esta ocasión, no se exactamente porqué, después de responder a mi hija algo en mi cabeza empezó a retorcerse: &amp;#8220;¿es el azul mi color favorito?&amp;#8221;. De repente me vi cuestionando algo que estaba grabado a fuego en mi cerebro desde hace tanto tiempo que no soy capaz de recordar cuando decidí que el azul era mi color favorito.&lt;/p&gt;

&lt;p&gt;Si me paro a pensar detenidamente, en mi caso esta respuesta está completamente programada desde mi infancia y ha perdurado hasta hace unos días como una verdad absoluta e incuestionable. Pero si lo analizo, cada vez que tengo que tomar una decisión que implique decantarme por un color, el azul nunca es mi elección. Seguro que en algún momento de mi infancia el azul era mi color favorito y este dato se hizo hueco en mi cerebro, acomodándose de tal modo que no había vuelto a cuestionarme su vigencia hasta ahora.&lt;/p&gt;

&lt;p&gt;Alguno podría estarse preguntando ahora mismo: &amp;#8220;¿y qué carajo tiene esto que ver con el desarrollo del software?&amp;#8221;&lt;/p&gt;

&lt;p&gt;Personalmente creo que tiene mucho que ver, porque es algo que me encuentro constantemente cuando trabajo con equipos de desarrollo. Cada cierto tiempo me enfrento a &amp;#8220;programaciones&amp;#8221; de este tipo que, en lugar de estar relacionadas con el color favorito o el equipo de fútbol preferidos, están relacionadas con el uso de una tecnología, la aplicación de un patrón o la preferencia a la hora de aplicar una determinada práctica en detrimento de otra.&lt;/p&gt;

&lt;h1 id=&#34;los-principios-sobre-las-prácticas&#34;&gt;Los principios sobre las prácticas&lt;/h1&gt;

&lt;p&gt;Es frecuente que, después de que un equipo de desarrollo tome una decisión, se olviden las razones que llevaron la toma de esa decisión. Es más, es frecuente que esa decisión se convierta en una verdad inamovible e incuestionable hasta tal punto que, aunque las razones que originaron esa decisión sean modificadas, da igual, nadie se plantea si la decisión debe replantearse o no.&lt;/p&gt;

&lt;p&gt;Es importante poder recurrir siempre a los principios que originan la decisión de aplicar las prácticas. Cuando el debate gira entorno a la práctica, olvidando el principio, estamos perdidos. Es como debatir sobre una solución sin recordar el problema. Cuando esto sucede, lo habitual termina siendo un debate en el que se pierde completamente el foco y terminamos en una espiral en la que lo que debatimos es cómo solucionar el nuevo problema que ha generado la solución propuesta, en lugar de pensar si es posible buscar una solución alternativa al problema original sin que ello conlleve una reacción en cadena de problemas.&lt;/p&gt;

&lt;h1 id=&#34;localiza-bien-el-problema&#34;&gt;Localiza bien el problema&lt;/h1&gt;

&lt;p&gt;Cuando llega el momento de enfrentarse a un problema, funciona muy bien dedicar unos minutos a poner por escrito cuál es exactamente el problema que queremos resolver. Una vez hecho esto, mi recomendación dedicar unos minutos más a pensar si ese es realmente es el problema a resolver o en realidad estamos condicionados por un problema generado por la solución actual. Una vez que hemos salido de la espiral de los problemas generados por las soluciones, estaremos en verdadera disposición de debatir sobre el problema.&lt;/p&gt;

&lt;p&gt;En ocasiones tendremos que adoptar soluciones a problemas grandes que generan problemas pequeños y nos veremos obligados a trabajar sobre esas bases, pero lo más importante es no olvidar nunca los principios o perderemos la capacidad de cuestionar dichas soluciones porque la respuesta siempre será: &amp;#8220;no se, se decidió así y así lo hemos hecho desde entonces. Mejor no tocarlo por si acaso&amp;#8221;.&lt;/p&gt;

&lt;h1 id=&#34;no-sólo-a-nivel-de-código&#34;&gt;No sólo a nivel de código&lt;/h1&gt;

&lt;p&gt;Este tipo de problemas nos los encontramos constantemente en otras facetas del desarrollo de software. Es común terminar con procesos de despliegue enrevesados, en los que mitigamos el dolor complicando el proceso con soluciones que a la larga generan más focos de dolor y que nos sumergen en la espiral de la que ya he hablado. Esto es frecuente cuando llega el momento de plantear despliegues automáticos de sistemas complejos o en el desarrollo de los propios procesos de negocio.&lt;/p&gt;

&lt;h1 id=&#34;cuidado-con-el-diagnóstico&#34;&gt;Cuidado con el diagnóstico&lt;/h1&gt;

&lt;p&gt;Otro de los problemas comunes es criticar el principio después de tener una experiencia traumática aplicando la práctica. Otro es justo el contrario, estigmatizar la práctica cuando el error fue tratar de aplicarla sobre un problema para el que no era adecuada. Algunos ejemplos podrían ser:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enfocar de forma errónea un entorno de integración continua y que la conclusión sea que la integración continua no funciona.&lt;/li&gt;
&lt;li&gt;Invertir la &lt;a href=&#34;http://martinfowler.com/bliki/TestPyramid.html&#34; target=&#34;_blank&#34;&gt;pirámide de test&lt;/a&gt; y llegar a un punto en el que los tests son muy frágiles y caros de mantener, pero concluir que hacer tests automáticos no merece la pena.&lt;/li&gt;
&lt;li&gt;Decidir utilizar una base de datos no relacional para solucionar un problema más adecuado para una relacional y descartar el uso de base de datos no relacionales para cualquier cosa.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;no-nos-olvidemos-de-entregar-software&#34;&gt;No nos olvidemos de entregar software&lt;/h1&gt;

&lt;p&gt;La realidad de todo proyecto es que siempre hay algo que se puede hacer mejor. Siempre hay un proceso que se puede optimizar, los tests pueden ser más completos y legibles, el código se puede refactorizar o se puede buscar otro enfoque. Pero no hay que volverse loco, no hay que olvidar que desarrollamos software con una finalidad y, si no lo entregamos, los usuarios no lo podrán utilizar. Desarrollar software y no entregarlo es lo mismo que no desarrollar software.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[PowerShell] Pasar de SecureString a String</title>
      <link>http://www.modestosanjuan.com.com/powershell-pasar-de-securestring-a-string/</link>
      <pubDate>Wed, 25 Nov 2015 09:16:48 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com.com/powershell-pasar-de-securestring-a-string/</guid>
      <description>&lt;p&gt;En ocasiones necesito usar un &lt;strong&gt;SecureString&lt;/strong&gt; pero luego me veo obligado a utilizar ese string de forma no segura. Aunque la recomendación es no hacer esto, la realidad es que hay muchos escenarios en los que es necesario. Un ejemplo sencillo es el caso en el que necesito que el usuario meta un dato sensible por consola y pero luego necesito utilizar ese dato como texto plano para pasarlo como parámetro a un ejecutable de Windows. Este es un ejemplo de cómo hacerlo:&lt;/p&gt;

&lt;pre class=&#34;lang:ps decode:true&#34;&gt;Param(
   [Parameter(Mandatory=$True)]
   [SecureString]$password
)

function Decrypt-SecureString($secureString) {
    $BSTR = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($password)
    return [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR)
}

$nonSecure = Decrypt-SecureString $password&lt;/pre&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[PowerShell] Interrumpir la ejecución cuando Import-Module no encuentra el módulo</title>
      <link>http://www.modestosanjuan.com.com/interrumpir-la-ejecucion-cuando-import-module-no-encuentra-el-modulo/</link>
      <pubDate>Tue, 30 Jun 2015 18:03:02 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com.com/interrumpir-la-ejecucion-cuando-import-module-no-encuentra-el-modulo/</guid>
      <description>&lt;p&gt;Esto es un truco sencillo y muy básico de PowerShell, pero puede desconcertar bastante a quien está empezando o utiliza PowerShell de forma esporádica.&lt;/p&gt;

&lt;p&gt;En PowerShell existen los llamados &amp;#8220;terminating errors&amp;#8221; y los &amp;#8220;non-terminating errors&amp;#8221;. Como su nombre permite intuir, unos finalizan la ejecución del script en curso cuando se producen y los otros no, limitándose a informar del error. Hasta aquí he descrito el comportamiento por defecto. Que un error sea del tipo &amp;#8220;terminating&amp;#8221; o del tipo &amp;#8220;non-terminating&amp;#8221;, no es algo que nosotros podamos controlar, y eso puede dar algún que otro quebradero de cabeza en algunas ocasiones.&lt;/p&gt;

&lt;p&gt;Hoy estaba trabajando con un script en el que hacía un Import-Module y luego ejecutaba otra serie de scripts, algunos relacionados con el módulo que trataba de importar y otros no. Por simplificar, imaginemos que tenía un código como este:&lt;/p&gt;

&lt;pre class=&#34;lang:ps decode:true&#34;&gt;Import-Module NombreDeModuloQueNoExiste
Write-Host &#34;Aquí ejecutaría código NO relacionado con el módulo&#34;
Write-Host &#34;Aquí ejecutaría código relacionado con el módulo&#34;&lt;/pre&gt;

&lt;p&gt;En este caso el módulo que estaba intentando importar resulta que no existía en mi máquina, por lo que al intentar hacer un Import-Module, obtenía un error que me indicaba que el módulo no se encontraba. El problema es que el comportamiento de PowerShell no era exáctamente como yo quería:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.modestosanjuan.com.com/wp-content/uploads/2015/06/Error-Import-Module.png&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;alignnone wp-image-109 size-full&#34; src=&#34;http://www.modestosanjuan.com.com/wp-content/uploads/2015/06/Error-Import-Module.png&#34; alt=&#34;Error-Import-Module&#34; width=&#34;997&#34; height=&#34;276&#34; srcset=&#34;http://www.modestosanjuan.com.com/wp-content/uploads/2015/06/Error-Import-Module.png 997w, http://www.modestosanjuan.com.com/wp-content/uploads/2015/06/Error-Import-Module-300x83.png 300w&#34; sizes=&#34;(max-width: 997px) 100vw, 997px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Como se puede ver, el resultado era que me salía el error, pero además se estaba ejecutando las dos líneas de código posteriores, y ese no era el comportamiento que yo quería. Como no estoy todo el día con PowerShell, a veces me pasan este tipo de cosas y me desorientan un poco, pero en este caso me acordaba de este tipo de problemas y lo pude atajar rápido.&lt;/p&gt;

&lt;p&gt;Resulta que PowerShell tiene una variable llamada &lt;strong&gt;$ErrorActionPreference&lt;/strong&gt; que determina el comportamiento a seguir en caso de errores &amp;#8220;non-terminating&amp;#8221;. El valor por defecto es &lt;strong&gt;Continue&lt;/strong&gt; así que es algo así como el &lt;strong&gt;On Error Resume Next&lt;/strong&gt; de Visual Basic.&lt;/p&gt;

&lt;p&gt;Los valores posibles para esta variable son Stop, Inquire, Continue, Suspend y SilentlyContinue, pero yo normalmente únicamente utilizo los valores &lt;strong&gt;Stop&lt;/strong&gt; y &lt;strong&gt;Continue&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;De este modo, estableciendo la variable antes de ejecutar el &lt;strong&gt;Import-Module,&lt;/strong&gt; es posible obtener el comportamiento deseado.&lt;/p&gt;

&lt;pre class=&#34;lang:ps decode:true&#34;&gt;$ErrorActionPreference = &#34;Stop&#34;
Import-Module NombreDeModuloQueNoExiste
Write-Host &#34;Este código nunca llega a llamarse&#34;

&lt;/pre&gt;

&lt;p&gt;Personalmente soy partidario de poner el valor a &lt;strong&gt;Stop&lt;/strong&gt; al principio de los scripts, junto con el &lt;strong&gt;Set-StrictMode&lt;/strong&gt; y luego cambiar este valor puntualmente si así lo necesito en algún caso.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Eliminar regiones (#region) de forma masiva desde Visual Studio</title>
      <link>http://www.modestosanjuan.com.com/eliminar-regiones-de-forma-masiva-desde-visual-studio/</link>
      <pubDate>Tue, 16 Jun 2015 10:58:45 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com.com/eliminar-regiones-de-forma-masiva-desde-visual-studio/</guid>
      <description>&lt;p&gt;No voy a entrar en el debate de si el uso de #regions es una buena práctica o no, pero es algo que no utilizo y que suelo interpretar como un mal olor cuando me lo encuentro en el código. Me he animado a escribir este pequeño apune porque recientemente me he encontrado con la necesidad de eliminar de un proyecto casi 25.000 regiones (si, veinticinco mil) y quiero tener esto a mano para el futuro.&lt;/p&gt;

&lt;p&gt;El truco es muy sencillo, necesitamos recurrir a la funcionalidad de buscar y reemplazar de Visual Studio y marcar el check para que utilice expresiones regulares en la búsqueda.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.modestosanjuan.com.com/wp-content/uploads/2015/06/search-replace-vs.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-104&#34; src=&#34;http://www.modestosanjuan.com.com/wp-content/uploads/2015/06/search-replace-vs.png&#34; alt=&#34;Buscar y reemplazar&#34; width=&#34;385&#34; height=&#34;504&#34; srcset=&#34;http://www.modestosanjuan.com.com/wp-content/uploads/2015/06/search-replace-vs.png 385w, http://www.modestosanjuan.com.com/wp-content/uploads/2015/06/search-replace-vs-229x300.png 229w&#34; sizes=&#34;(max-width: 385px) 100vw, 385px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Una vez hecho esto, debemos realizar dos pasos, el primero para los #region y el segundo para los #endregion. Estas son las dos expresiones regulares que debemos utilizar si el código está escrito el C#:&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;pre class=&#34;lang:default decode:true&#34;&gt;\#region .*\n

Si es C#
\#endregion .*\n

Si es VB.Net
\#end region .*\n


&lt;/pre&gt;

&lt;p&gt;Cuando lo hago especifico además que únicamente aplique este cambio para ficheros &amp;#8220;.vb&amp;#8221; o &amp;#8220;.cs&amp;#8221; según corresponda.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>¿Necesitas programar un servicio para Windows? Prueba Topshelf</title>
      <link>http://www.modestosanjuan.com.com/necesitas-programar-un-servicio-para-windows-prueba-topshelf/</link>
      <pubDate>Mon, 15 Jun 2015 23:44:42 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com.com/necesitas-programar-un-servicio-para-windows-prueba-topshelf/</guid>
      <description>&lt;p&gt;Programar un servicio para Windows suele ser una tarea engorrosa y &lt;a href=&#34;http://topshelf-project.com/&#34; target=&#34;_blank&#34;&gt;Topshelf&lt;/a&gt; proporciona una alternativa bastante interesante y muchísimo menos engorrosa que la plantilla por defecto que incorpora Visual Studio.&lt;/p&gt;

&lt;p&gt;Aunque podría enumerar bastantes aspectos interesantes de Topshelf, me quedo con uno que para mi es fundamental, permite que una aplicación de consola sea un servicio de Windows. Esto significa que es posible recurrir a la aplicación de consola durante la fase de desarrollo o para su ejecución de forma independiente, pero que además es posible instalar esa aplicación de consola como un servicio Windows simplemente pasando un parámetro en su ejecución.&lt;/p&gt;

&lt;p&gt;Utilizar Topshelf para crear un servicio de Windows es muy sencillo. Voy a describir los pasos básicos necesarios para dar un servicio, aunque luego podemos complicarlo bastante:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Creamos una aplicación de consola e instalamos el paquete Topshelf&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Añadimos una clase que contenga la lógica del servicio que queremos crear. El esqueleto podría ser como este: &lt;pre class=&#34;lang:c# decode:true&#34; title=&#34;Código de ejemplo del servicio&#34;&gt;public class ServiceRunner {
    public void Start() {
        // Código para ejecutar al iniciar el servicio
    }
    public void Stop() {
        // Código para ejecutar al parar el servicio
    }
}&lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Modificamos la clase Main para configurar el servicio: &lt;pre class=&#34;lang:c# decode:true&#34;&gt;static void Main(string[] args) {
 HostFactory.Run(x =&amp;gt;
 {
      x.Service&amp;lt;ServiceRunner&amp;gt;(sc =&amp;gt;
      {
           sc.ConstructUsing(name =&amp;gt; new ServiceRunner());
           sc.WhenStarted(rn =&amp;gt; rn.Start());
           sc.WhenStopped(rn =&amp;gt; rn.Stop());
      });
      x.RunAsLocalSystem();
      x.SetDescription(&amp;ldquo;Descripción del servicio&amp;rdquo;);
      x.SetDisplayName(&amp;ldquo;DisplayName&amp;rdquo;);
      x.SetServiceName(&amp;ldquo;Nombre del servicio&amp;rdquo;);
 });
}&lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;En la &lt;a href=&#34;http://docs.topshelf-project.com/en/latest/&#34; target=&#34;_blank&#34;&gt;documentación&lt;/a&gt; es posible encontrar muchos más detalles. Por ejemplo, además de poder configurar el código a ejecutar en el inicio (WhenStarted) o en la parada (WhenStopped), podemos configurar el comportamiento para la pausa (WhenPaused), continuación (WhenContinued) y el apagado (WhenShutdown).&lt;/p&gt;

&lt;p&gt;Una vez hecho esto tenemos una aplicación de consola que podemos ejecutar de forma individual, depurar desde Visual Studio o instalarla como servicio y Topshelf se encargará de ejecutar el código correspondiente al inicio del servicio. Para instalar el servicio sólo es necesario ejecutar la aplicación de consola con el parámetro &amp;#8220;install&amp;#8221; y para desinstalarla con el parámetro &amp;#8220;uninstall&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Muy importante a tener en cuenta es el usuario con el que se va a ejecutar el servicio. Por ejemplo, si en el servicio vamos a utilizar Owin para levantar una Web o un API, este código de ejemplo no funcionará porque si el servicio arranca como LocalSystem no tendrá los permisos adecuados.&lt;/p&gt;

&lt;p&gt;Es posible pasar otros parámetros para configurar el comportamiento deseado para el servicio en lo que a modo de inicio, usuario de ejecución, ejecución de comandos después de su instalación, etc. Lo mejor es ver la &lt;a href=&#34;http://docs.topshelf-project.com/en/latest/&#34; target=&#34;_blank&#34;&gt;documentación&lt;/a&gt; para estar al tanto de todas las opciones.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Utilizando Extensionless para monitorizar logs y excepciones</title>
      <link>http://www.modestosanjuan.com.com/utilizando-extensionless-para-monitorizar-logs-y-excepciones/</link>
      <pubDate>Fri, 05 Jun 2015 18:11:52 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com.com/utilizando-extensionless-para-monitorizar-logs-y-excepciones/</guid>
      <description>

&lt;p&gt;Cada vez que abordo un nuevo desarrollo, considero que la generación de trazas es una parte vital ya que es uno de los mecanismos que nos va a permitir diagnosticar e identificar cualquier tipo de problema cuando estemos en producción, en ocasiones incluso antes de que los propios usuarios lleguen a reportarlo.&lt;/p&gt;

&lt;p&gt;Hacer que nuestra aplicación genere las trazas adecuadas es una gran herramienta, no sólo para diagnosticar bugs, también permite identificar problemas relacionados con el rendimiento y otro tipo de funcionamientos anómalos de nuestras aplicaciones.&lt;/p&gt;

&lt;p&gt;Durante los últimos años he utilizado &lt;a href=&#34;http://nlog-project.org/&#34;&gt;NLog&lt;/a&gt;, la librería de &lt;a href=&#34;http://www.theobjectguy.com/dotnetlog/&#34;&gt;The Object Guy&lt;/a&gt;, desarrollos propios y estos últimos meses he utilizado &lt;a href=&#34;http://serilog.net/&#34;&gt;Serilog&lt;/a&gt; en proyectos WPF, Web y WinRT. Pero siempre hay algo que no termina de convencerme, los interfaces para explorar los logs. He probado aplicaciones para Windows como &lt;a href=&#34;http://www.log-expert.de/&#34;&gt;LogExpert&lt;/a&gt;, &lt;a href=&#34;http://www.baremetalsoft.com/baretail/&#34;&gt;BareTail&lt;/a&gt;, &lt;a href=&#34;http://cbaxter.github.io/Harvester/&#34;&gt;Harvester&lt;/a&gt;, &lt;a href=&#34;http://tailforwin32.sourceforge.net/&#34;&gt;Tail for Win32&lt;/a&gt;, o soluciones más trabajadas como &lt;a href=&#34;http://www.splunk.com/&#34;&gt;Splunk&lt;/a&gt; o &lt;a href=&#34;https://logentries.com/&#34;&gt;LogEntries&lt;/a&gt;, pero al final ninguna me ha convencido por funcionalidad o por coste.&lt;/p&gt;

&lt;p&gt;Hace unos meses me encontré con &lt;a href=&#34;https://exceptionless.com/&#34;&gt;ExceptionLess&lt;/a&gt; y me pareció un proyecto bastante interesante. A modo de resumen, estos son algunos de los puntos que me parecieron interesantes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Puedo utilizarlos como servicio o montarlo sobre mi propia infraestructura.&lt;/li&gt;
&lt;li&gt;Dispone de librerías PCL con soporte offline. Lo que significa que puedo utilizarlo en la tablet y, cuando no tenga conexión, guarda los logs en local para enviarlos cuando la conexión vuelva.&lt;/li&gt;
&lt;li&gt;Tiene soporte de notificaciones.&lt;/li&gt;
&lt;li&gt;Puedo adjuntar objetos complejos a las trazas, para poder consultarlos cuando vea la traza desde la UI. Básicamente, si se puede serializar en Json, se puede adjuntar.&lt;/li&gt;
&lt;li&gt;Me intenta facilitar la identificación de problemas/patrones agrupando las trazas o mostrando las que más se producen.&lt;/li&gt;
&lt;li&gt;Es Open Source. Y esto me parece especialmente importante porque me permite solucionar algunas de las carencias menores que estoy encontrando (ya sólo me falta aprender Angular ;P).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Y como no todo son cosas buenas, me parece importante remarcar algunas cosas que no me han gustado durante su uso:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;El interfaz de usuario aún está un poco verde. Tiene algunos detalles de interfaz que desorientan un poco. Cosas tontas como que al darle a buscar no te mande al listado con los resultados de la búsqueda si estás en el detalle de un log. Simplemente establece el filtro como el filtro activo, pero tienes tú que irte al listado de logs para poder verlos.&lt;/li&gt;
&lt;li&gt;Está muy orientado a que lo uses con su plataforma. Esto se nota muchísimo al configurarlo en un servidor propio en detalles como que las configuraciones por defecto apunten a su dominio (exceptionless.io) o que aspectos de la configuración de servidor y de los clientes son distintos.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ojo-si-quieres-configurar-exceptionless-en-tu-propio-servidor&#34;&gt;Ojo si quieres configurar ExceptionLess en tu propio servidor&lt;/h2&gt;

&lt;p&gt;No tiene sentido hacer un tutorial sobre cómo configurarlo en local porque en github están las instrucciones y no son complicadas. Únicamente es necesario tener MongoDB y ElasticSearch. En caso de montar varios servidores de API, es necesario Redis, pero para un único nodo no es necesario y utiliza una implementación en memoria.&lt;/p&gt;

&lt;p&gt;Ten en cuenta que necesitas instalar dos proyectos, el &lt;a href=&#34;https://github.com/exceptionless/Exceptionless&#34;&gt;API&lt;/a&gt; y la &lt;a href=&#34;https://github.com/exceptionless/Exceptionless.UI&#34;&gt;UI&lt;/a&gt;. Para este ejemplo, supongamos una configuración local de pruebas con el API instalado en: &lt;a href=&#34;http://localhost/ExceptionLess.API&#34;&gt;http://localhost/ExceptionLess.API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Al instalar la UI, es necesario editar el fichero &lt;strong&gt;&lt;em&gt;app.config&lt;/em&gt;&lt;/strong&gt; para especificar en la clave &lt;strong&gt;BASE_URL&lt;/strong&gt; la url del API. Pues bien, aunque la primera opción parece que sería poner la url &amp;#8216;&lt;a href=&#34;http://localhost/ExceptionLess.API&amp;amp;#8217&#34;&gt;http://localhost/ExceptionLess.API&amp;amp;#8217&lt;/a&gt;;, al hacer esto no va a funcionar. La url correcta que hay que configurar es: &lt;strong&gt;&amp;#8216;&lt;a href=&#34;http://localhost/ExceptionLess.API/api/v2&amp;amp;#8217&#34;&gt;http://localhost/ExceptionLess.API/api/v2&amp;amp;#8217&lt;/a&gt;;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sin embargo, para enviar logs a ese servidor desde una &lt;strong&gt;aplicación .Net&lt;/strong&gt;, la url que debo configurar si que es &lt;strong&gt;&amp;#8216;&lt;a href=&#34;http://localhost/ExceptionLess.API&amp;amp;#8217&#34;&gt;http://localhost/ExceptionLess.API&amp;amp;#8217&lt;/a&gt;;&lt;/strong&gt;. Esto me volvió un poco loco al principio.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cómo crear Appx para Sideloading desde Integración Continua</title>
      <link>http://www.modestosanjuan.com.com/como-crear-appx-para-sideloading-desde-integracion-continua/</link>
      <pubDate>Wed, 13 May 2015 06:45:57 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com.com/como-crear-appx-para-sideloading-desde-integracion-continua/</guid>
      <description>&lt;p&gt;Cuando trabajamos con aplicaciones para la tienda de Windows, hay escenarios en los que necesitamos hacer Sideloading. Básicamente el Sideloading nos permite instalar una aplicación de la tienda de Windows, sin utilizar la tienda de Windows. Las razones para querer hacer Sideloading pueden ser muchas: probar la aplicación en local antes de subirla a la tienda, instalar la aplicación en algunos dispositivos para hacer testing en friends&amp;amp;family o simplemente utilizar la aplicación a nivel corporativo fuera de la tienda de Windows.&lt;/p&gt;

&lt;p&gt;En uno de los proyectos en los que estoy trabajando ahora mismo nos encontramos dentro de esos escenarios. Tenemos una aplicación que se distribuye mediante Sideloading y además tenemos un equipo de Q&amp;amp;A que prueba tanto las versiones de desarrollo como las release candidate.&lt;/p&gt;

&lt;p&gt;Como resultaba bastante pesado tener que estar dependiendo de generar los paquetes para Sideloading de forma manual, decidimos crear estos paquetes de forma manual desde nuestro entorno de integración continua. En este caso utilizamos Jenkins, pero lo aquí descrito funciona para cualquier otro sistema.&lt;/p&gt;

&lt;p&gt;Microsoftnos dice en &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/hh924768.aspx&#34;&gt;este&lt;/a&gt; enlace cómo crear un paquete utilizando msbuild. Básicamente se limita a pedir a msbuild que compile el proyecto de la app para la tienda de Windows:&lt;/p&gt;

&lt;pre class=&#34;lang:default decode:true&#34;&gt;MSBuild MyProject.csproj /p:OutDir=C:\builds\droplocation\&lt;/pre&gt;

&lt;p&gt;El problema de esta aproximación es que en proyectos grandes, es normal tener una solución con varios proyectos (pero sin pasarse eh!). Al tener varios proyectos solemos tener una estructura de carpetas que implica que, al compilar un proyecto de forma independiente, msbuild nos de problemas para encontrar los paquetes de nuget porque los busca de forma relativa a la ruta de la solución y no a la ruta del proyecto.&lt;/p&gt;

&lt;p&gt;En fin, tengamos este problema o no, que podría solucionarse de muchas otras formas, una manera muy sencilla de tener un paquete de aplicación es modificar el .csproj para que cree el paquete de aplicación cada vez que compilamos el proyecto (sea dentro de una solución o de forma independiente). Para ello tenemos que añadir estas líneas al .csproj de nuestra aplicación de la tienda:&lt;/p&gt;

&lt;pre class=&#34;lang:xhtml decode:true&#34;&gt;&amp;lt;PropertyGroup Condition=&#34;&#39;$(BuildingInsideVisualStudio)&#39; != &#39;true&#39;&#34;&amp;gt;
    &amp;lt;GenerateAppxPackageOnBuild&amp;gt;True&amp;lt;/GenerateAppxPackageOnBuild&amp;gt;
    &amp;lt;AppxPackageDir&amp;gt;$(OutputPath)AppPackages&amp;lt;/AppxPackageDir&amp;gt;
    &amp;lt;AppxPackageName&amp;gt;$(AssemblyName)_$(Platform)&amp;lt;/AppxPackageName&amp;gt;
&amp;lt;/PropertyGroup&amp;gt;    
&lt;/pre&gt;

&lt;p&gt;Es muy importante tener en cuenta el atributo &lt;strong&gt;Condition&lt;/strong&gt; del PropertyGroup, ya que así evitamos que se genere el paquete de la aplicación cada vez que la compilamos desde Visual Studio (no queremos penalizar el tiempo de compilación del equipo de desarrollo). Por supuesto, podemos cambiar esta condición por una que tenga en cuenta el perfil de compilación o cualquier otro factor, pero a nosotros nos ha parecido bastante adecuada esta.&lt;/p&gt;

&lt;p&gt;Por otro lado, al especificar el &lt;strong&gt;AppxPackageName&lt;/strong&gt; conseguimos tener siempre un el mismo nombre de archivo .appx, para evitar que el criterio por defecto de que el número de versión se incluya en el nombre del archivo. Así facilitamos la vida de cara a los procesos de automatización que describiré en próximas entradas.&lt;/p&gt;

&lt;p&gt;Otro detalle importante a tener en cuenta es especificar en el nombre del paquete la plataforma, porque en alguna ocasión me ha pasado que msbuild genera los .appx de 32 y 64 bits dentro de la misma carpeta, machacando el primero al generar el último, lo que dará grandes quebraderos de cabeza.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>