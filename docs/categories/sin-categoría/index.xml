<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sin Categoría on Blog de Modesto San Juan</title>
    <link>http://www.modestosanjuan.com/categories/sin-categor%C3%ADa/</link>
    <description>Recent content in Sin Categoría on Blog de Modesto San Juan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-es</language>
    <lastBuildDate>Thu, 10 Nov 2016 10:01:15 +0000</lastBuildDate>
    
	<atom:link href="http://www.modestosanjuan.com/categories/sin-categor%C3%ADa/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>La regla del boy scout</title>
      <link>http://www.modestosanjuan.com/la-regla-del-boy-scout/</link>
      <pubDate>Thu, 10 Nov 2016 10:01:15 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/la-regla-del-boy-scout/</guid>
      <description>Hay discipinas en las que dicen que a largo plazo es más importante la constancia que el talento. Creo que en el desarrollo de software tener constancia es una virtud.
Conforme va avanzando un proyecto, es normal que el diseño sufra cambios (preferiblemente pequeños) y a la vez el código puede sufrir altibajos de calidad.
Tener un conocimiento escaso del problema, equivocarnos al enfocar la solución y muchos otros factores pueden llevarnos a una circunstancia muy habitual: estamos enfocando una historia de usuario y pasamos por una parte de nuestro código que no se entiende bien, está mal enfocada, es complicada de extender, en general, nos está impidiendo avanzar de forma fluida hacia nuestro objetivo, entregar valor.</description>
    </item>
    
    <item>
      <title>Desarrollador, pon contenedores en tu vida</title>
      <link>http://www.modestosanjuan.com/desarrollador-pon-contenedores-en-tu-vida/</link>
      <pubDate>Sun, 06 Nov 2016 23:10:11 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/desarrollador-pon-contenedores-en-tu-vida/</guid>
      <description>No, en este post no te voy a vender las virtudes de desplegar su aplicación sobre docker. Mucho se ha escrito sobre el tema y mucho se seguirá escribiendo. También se ha escrito de lo malo que es docker y de lo no tan malo que es.
Este post está destinado especialmente a todos aquellos desarrolladores que no desplegáis vuestras aplicaciones con Docker. Porque los que ya usáis docker en el ciclo de entrega ya sabéis lo que voy a contar y además os parece obvio.</description>
    </item>
    
    <item>
      <title>Nuevos retos</title>
      <link>http://www.modestosanjuan.com/nuevos-retos/</link>
      <pubDate>Fri, 14 Oct 2016 15:40:53 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/nuevos-retos/</guid>
      <description>Estos últimos dos meses he andado bastante liado y no he prestado mucha atención al blog. Esta vez no voy a hablar de ningún tema técnico, se trata de una post muy personal. Si no te interesa mi vida, deja de leer. Si te interesa, eres un poco cotilla ;P
Este mes cierro una etapa profesional maravillosa que me ha dado muchas alegrías, me ha permitido trabajar con un equipo genial, aprender como no lo hacía en muchos años y divertirme haciendo lo que más me gusta, desarrollar software.</description>
    </item>
    
    <item>
      <title>¿Cuánto cuesta llamar a un método?</title>
      <link>http://www.modestosanjuan.com/cuanto-cuesta-llamar-a-un-metodo/</link>
      <pubDate>Tue, 02 Aug 2016 00:03:45 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/cuanto-cuesta-llamar-a-un-metodo/</guid>
      <description>Últimamente Twitter está siendo toda una fuente de inspiración. En esta ocasión el hilo culpable es este. Javier Cantón hace un comentario respecto a la diferencia de rendimiento existente entre llamar a un método virtual versus llamar al mismo método a través de un interface.
En este post no pienso hablar de lo malvadas que son las optimizaciones prematuras, asumo que el comentario de Javier tenía su contexto, así que me voy a quedar con la parte que me ha resultado curiosa.</description>
    </item>
    
    <item>
      <title>Claves primarias: inmutabilidad y generación</title>
      <link>http://www.modestosanjuan.com/claves-primarias-inmutabilidad-y-generacion/</link>
      <pubDate>Sat, 30 Jul 2016 23:39:11 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/claves-primarias-inmutabilidad-y-generacion/</guid>
      <description>Hace unos días Pablo Iglesias tuiteó una pregunta de Stack Exchange en la que hablaban sobre la inmutabilidad de las claves primarias. Se generó un debate bastante interesante en Twitter que se extendió más allá de la cuestión de la inmutabilidad. Este es un intento de recopilar y explicar algunos de los conceptos que se mencionaron durante ese debate.
Claves primarias mutables o inmutables Para el que ande un poco perdido con el concepto, básicamente se trata de determinar si la clave primaria de una entidad debería poder cambiar o no una vez establecida.</description>
    </item>
    
    <item>
      <title>Palabras malditas</title>
      <link>http://www.modestosanjuan.com/palabras-malditas/</link>
      <pubDate>Mon, 13 Jun 2016 10:02:56 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/palabras-malditas/</guid>
      <description>Extreme programming y el desarrollo ágil A principios de siglo (dicho así parece que queda muy atrás, eh&amp;#8230; :P) trabajaba en Indra como coordinador de un equipo de desarrollo. En mi entorno profesional era un poco como un bicho raro porque, además de ser 10 años más joven que la media de mi puesto, era de los pocos que se negaba a abandonar el desarrollo para dedicarme plenamente a la gestión.</description>
    </item>
    
    <item>
      <title>Presta atención a tus datos de pruebas</title>
      <link>http://www.modestosanjuan.com/presta-atencion-a-tus-datos-de-pruebas/</link>
      <pubDate>Mon, 29 Feb 2016 23:04:10 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/presta-atencion-a-tus-datos-de-pruebas/</guid>
      <description>Los datos utilizados en las pruebas son muy importantes y, aunque el tema de este post parece muy obvio, no son pocas la veces que me he encontrado con problemas debido a este tema, así que creo que merece la pena dedicarle al menos unas líneas.
Hay varios aspectos que son importantes a tener en cuenta al definir datos para nuestras pruebas automáticas. En este post me voy a centrar en tres errores que me encuentro con frecuencia:</description>
    </item>
    
    <item>
      <title>Impresiones sobre pair programming</title>
      <link>http://www.modestosanjuan.com/impresiones-sobre-pair-programming/</link>
      <pubDate>Tue, 19 Jan 2016 01:13:56 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/impresiones-sobre-pair-programming/</guid>
      <description>El viernes mantuve una conversación bastante entretenida sobre desarrollo de software con un compañero de profesión. Trabaja en una entidad financiera y al hablar de cosas como TDD, Agile, XP, etc. tenía ciertos sentimientos enfrentados. Precisamente uno de los temas que le causaban controversia era el pair programming. Su opinión básicamente se resumía en una frase: &amp;#8220;yo lo que no compro es que dos tíos senior sentados juntos a programar van a ser más productivos que si programan por separado&amp;#8221;.</description>
    </item>
    
    <item>
      <title>Nuestra programación es mala para el desarrollo de software</title>
      <link>http://www.modestosanjuan.com/nuestra-programacion-es-mala-para-el-desarrollo-de-software/</link>
      <pubDate>Mon, 28 Dec 2015 22:22:29 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/nuestra-programacion-es-mala-para-el-desarrollo-de-software/</guid>
      <description>La programación de mi color favorito El otro día mi hija me preguntó cuál era mi color favorito. Respondí inmediatamente sin pensarlo: &amp;#8220;el azul&amp;#8221;. No era la primera vez que me lo preguntaban y es un dato que tengo claro desde que era niño. O no.
En esta ocasión, no se exactamente porqué, después de responder a mi hija algo en mi cabeza empezó a retorcerse: &amp;#8220;¿es el azul mi color favorito?</description>
    </item>
    
    <item>
      <title>[PowerShell] Pasar de SecureString a String</title>
      <link>http://www.modestosanjuan.com/powershell-pasar-de-securestring-a-string/</link>
      <pubDate>Wed, 25 Nov 2015 09:16:48 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/powershell-pasar-de-securestring-a-string/</guid>
      <description>En ocasiones necesito usar un SecureString pero luego me veo obligado a utilizar ese string de forma no segura. Aunque la recomendación es no hacer esto, la realidad es que hay muchos escenarios en los que es necesario. Un ejemplo sencillo es el caso en el que necesito que el usuario meta un dato sensible por consola y pero luego necesito utilizar ese dato como texto plano para pasarlo como parámetro a un ejecutable de Windows.</description>
    </item>
    
    <item>
      <title>[PowerShell] Interrumpir la ejecución cuando Import-Module no encuentra el módulo</title>
      <link>http://www.modestosanjuan.com/interrumpir-la-ejecucion-cuando-import-module-no-encuentra-el-modulo/</link>
      <pubDate>Tue, 30 Jun 2015 18:03:02 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/interrumpir-la-ejecucion-cuando-import-module-no-encuentra-el-modulo/</guid>
      <description>Esto es un truco sencillo y muy básico de PowerShell, pero puede desconcertar bastante a quien está empezando o utiliza PowerShell de forma esporádica.
En PowerShell existen los llamados &amp;#8220;terminating errors&amp;#8221; y los &amp;#8220;non-terminating errors&amp;#8221;. Como su nombre permite intuir, unos finalizan la ejecución del script en curso cuando se producen y los otros no, limitándose a informar del error. Hasta aquí he descrito el comportamiento por defecto. Que un error sea del tipo &amp;#8220;terminating&amp;#8221; o del tipo &amp;#8220;non-terminating&amp;#8221;, no es algo que nosotros podamos controlar, y eso puede dar algún que otro quebradero de cabeza en algunas ocasiones.</description>
    </item>
    
    <item>
      <title>Eliminar regiones (#region) de forma masiva desde Visual Studio</title>
      <link>http://www.modestosanjuan.com/eliminar-regiones-de-forma-masiva-desde-visual-studio/</link>
      <pubDate>Tue, 16 Jun 2015 10:58:45 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/eliminar-regiones-de-forma-masiva-desde-visual-studio/</guid>
      <description>No voy a entrar en el debate de si el uso de #regions es una buena práctica o no, pero es algo que no utilizo y que suelo interpretar como un mal olor cuando me lo encuentro en el código. Me he animado a escribir este pequeño apune porque recientemente me he encontrado con la necesidad de eliminar de un proyecto casi 25.000 regiones (si, veinticinco mil) y quiero tener esto a mano para el futuro.</description>
    </item>
    
    <item>
      <title>¿Necesitas programar un servicio para Windows? Prueba Topshelf</title>
      <link>http://www.modestosanjuan.com/necesitas-programar-un-servicio-para-windows-prueba-topshelf/</link>
      <pubDate>Mon, 15 Jun 2015 23:44:42 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/necesitas-programar-un-servicio-para-windows-prueba-topshelf/</guid>
      <description>Programar un servicio para Windows suele ser una tarea engorrosa y Topshelf proporciona una alternativa bastante interesante y muchísimo menos engorrosa que la plantilla por defecto que incorpora Visual Studio.
Aunque podría enumerar bastantes aspectos interesantes de Topshelf, me quedo con uno que para mi es fundamental, permite que una aplicación de consola sea un servicio de Windows. Esto significa que es posible recurrir a la aplicación de consola durante la fase de desarrollo o para su ejecución de forma independiente, pero que además es posible instalar esa aplicación de consola como un servicio Windows simplemente pasando un parámetro en su ejecución.</description>
    </item>
    
    <item>
      <title>Utilizando Extensionless para monitorizar logs y excepciones</title>
      <link>http://www.modestosanjuan.com/utilizando-extensionless-para-monitorizar-logs-y-excepciones/</link>
      <pubDate>Fri, 05 Jun 2015 18:11:52 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/utilizando-extensionless-para-monitorizar-logs-y-excepciones/</guid>
      <description>Cada vez que abordo un nuevo desarrollo, considero que la generación de trazas es una parte vital ya que es uno de los mecanismos que nos va a permitir diagnosticar e identificar cualquier tipo de problema cuando estemos en producción, en ocasiones incluso antes de que los propios usuarios lleguen a reportarlo.
Hacer que nuestra aplicación genere las trazas adecuadas es una gran herramienta, no sólo para diagnosticar bugs, también permite identificar problemas relacionados con el rendimiento y otro tipo de funcionamientos anómalos de nuestras aplicaciones.</description>
    </item>
    
    <item>
      <title>Cómo crear Appx para Sideloading desde Integración Continua</title>
      <link>http://www.modestosanjuan.com/como-crear-appx-para-sideloading-desde-integracion-continua/</link>
      <pubDate>Wed, 13 May 2015 06:45:57 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/como-crear-appx-para-sideloading-desde-integracion-continua/</guid>
      <description>Cuando trabajamos con aplicaciones para la tienda de Windows, hay escenarios en los que necesitamos hacer Sideloading. Básicamente el Sideloading nos permite instalar una aplicación de la tienda de Windows, sin utilizar la tienda de Windows. Las razones para querer hacer Sideloading pueden ser muchas: probar la aplicación en local antes de subirla a la tienda, instalar la aplicación en algunos dispositivos para hacer testing en friends&amp;amp;family o simplemente utilizar la aplicación a nivel corporativo fuera de la tienda de Windows.</description>
    </item>
    
  </channel>
</rss>