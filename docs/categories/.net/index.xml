<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>.Net on Blog de Modesto San Juan</title>
    <link>http://www.modestosanjuan.com/categories/.net/</link>
    <description>Recent content in .Net on Blog de Modesto San Juan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-es</language>
    <lastBuildDate>Tue, 22 Dec 2015 14:14:43 +0000</lastBuildDate>
    
	<atom:link href="http://www.modestosanjuan.com/categories/.net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>La importancia del rojo en TDD</title>
      <link>http://www.modestosanjuan.com/la-importancia-del-rojo-en-tdd/</link>
      <pubDate>Tue, 22 Dec 2015 14:14:43 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/la-importancia-del-rojo-en-tdd/</guid>
      <description>A un desarrollador que practique TDD, el flujo rojo, verde, refactor no le resulta extraño. En este post quiero romper una lanza a favor del rojo, ese gran incomprendido. Para ilustrarlo voy a recurrir a un ejemplo muy sencillo:
[TestMethod] public void sample_test() { var messagingService = GivenAMessagingServiceStub(); var unreadMessages = messagingService.UnreadMessages(); unreadMessages.Count.Should().Be(1) } Este ejemplo esta simplificado, pero me permite mostrar un test con una estructura de tipo given/when/then o AAA (según gustos).</description>
    </item>
    
    <item>
      <title>Value Providers y Parameter Binding en ASP.NET Web API</title>
      <link>http://www.modestosanjuan.com/value-providers-y-parameter-binding-en-asp-net-web-api/</link>
      <pubDate>Fri, 13 Nov 2015 10:02:22 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/value-providers-y-parameter-binding-en-asp-net-web-api/</guid>
      <description>Cuando necesito acceder a información de la Request desde una acción de un controlador en ASP.NET Web API, la primera tentación es acceder directamente al objeto request y buscar lo que necesito. El principal problema de hacer esto es que convierte en un infierno hacer cualquier tipo de prueba automatizada para esta acción. Por ejemplo:
[HttpGet] [Route(&#34;doAnything&#34;)] public IHttpActionResult Get() { var referrer = request.Headers.Referrer var resul = ..... // DO ANY STUFF WITH THE REFERRER return result; } El mecanismo más sencillo que se me ocurre para hacer que esta acción sea fácil de probar es hacer que el dato que necesito de la request, le llegue como parámetro a la acción:</description>
    </item>
    
    <item>
      <title>Bus de eventos usando Reactive Extensions</title>
      <link>http://www.modestosanjuan.com/bus-de-eventos-usando-reactive-extensions/</link>
      <pubDate>Tue, 10 Nov 2015 09:32:59 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/bus-de-eventos-usando-reactive-extensions/</guid>
      <description>Utilizar un bus de eventos dentro de una aplicación es algo bastante común. Un ejemplo muy sencillo podría ser desacoplar la lógica de envío de notificaciones al usuario en WPF desde los ViewModels sin necesidad de recurrir a la inyección de dependencias en el ViewModel. Aunque hasta ahora había recurrido siempre a programar mi propio bus de eventos, utilizar Reactive Extensions me ha resultado muy interesante, útil y sencillo. Este sería un ejemplo de bus de eventos utilizando RX:</description>
    </item>
    
    <item>
      <title>Aclarando conceptos: proyectos PCL, universales y shared source</title>
      <link>http://www.modestosanjuan.com/aclarando-conceptos-proyectos-pcl-universales-y-shared-source/</link>
      <pubDate>Sun, 08 Mar 2015 12:22:55 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/aclarando-conceptos-proyectos-pcl-universales-y-shared-source/</guid>
      <description>Lo habitual cuando quiero compartir código entre proyectos es recurrir a crear bibliotecas de clases. Dependiendo del tipo de proyectos en los que quiera reutilizar mi trabajo, es necesario recurrir a bibliotecas portables (PCL) o incluso a proyectos de código compartido (shared source). Con bibliotecas PCL había trabajado anteriormente, pero no con proyectos universales y shared source, y creo que es importante tener claro cuales son las diferencias entre cada tipo, ya que juegan papeles muy diferentes.</description>
    </item>
    
    <item>
      <title>[Solucionado] Fluent Migrator no encuentra migraciones</title>
      <link>http://www.modestosanjuan.com/fluent-migrator-no-encuentra-migraciones/</link>
      <pubDate>Mon, 19 Jan 2015 01:23:05 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/fluent-migrator-no-encuentra-migraciones/</guid>
      <description>Hace unos meses empecé a trabajar en un proyecto en el que utilizamos Fluent Migrator. Todo funciona bien el proyecto tiene bastantes migraciones funcionando sin problema. En líneas generales funciona casi igual que las migraciones de EF, con algún detalle distinto.
El caso es que hoy he empezado un proyecto nuevo y he añadido la referencia al paquete de Fluent Migrator para empezar a utilizarlo. Cuando he lanzado las migraciones parecía que todo estaba bien (no daba ningún error), pero no me encontraba ninguna de las migraciones que había definido en el ensamblado de migraciones.</description>
    </item>
    
    <item>
      <title>Datos de ejemplo en el ViewModel para facilitar la vista de diseño</title>
      <link>http://www.modestosanjuan.com/datos-de-ejemplo-en-el-viewmodel-para-facilitar-la-vista-de-diseno/</link>
      <pubDate>Wed, 17 Dec 2014 00:27:25 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/datos-de-ejemplo-en-el-viewmodel-para-facilitar-la-vista-de-diseno/</guid>
      <description>Al trabajar con XAML, especialmente si la vista tiene un listado de items, puede resultar muy complicado ajustar la vista para que se vea correctamente. Tareas como ajustar los márgenes, la posición de los elementos o cualquier tipo de cambio en los estilos se pueden convertir en algo bastante pesado.
Este es un ejemplo de una vista de que contiene un ListView sin datos de ejemplo en vista de diseño:</description>
    </item>
    
  </channel>
</rss>