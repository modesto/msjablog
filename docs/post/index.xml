<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Blog de Modesto San Juan</title>
    <link>http://www.modestosanjuan.com/post/</link>
    <description>Recent content in Posts on Blog de Modesto San Juan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-es</language>
    <lastBuildDate>Sun, 03 Dec 2017 12:00:00 +0100</lastBuildDate>
    
	<atom:link href="http://www.modestosanjuan.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Recordando de qué va esto</title>
      <link>http://www.modestosanjuan.com/post/recordando-de-que-va-esto/</link>
      <pubDate>Sun, 03 Dec 2017 12:00:00 +0100</pubDate>
      
      <guid>http://www.modestosanjuan.com/post/recordando-de-que-va-esto/</guid>
      <description>De vuelta al blog Después de varios meses sin escribir por aquí, este fin de semana me apetecía quitarle el polvo al blog. No tenía nada en mente, aunque no quería aportar mi opinión al enésimo debate sobre Agile&amp;amp;Software Development, sobre si somos ebanistas o ingenieros, ni escribir una crónica sobre Codemotion o cualquiera de los eventos en los que he estado los últimos meses.
Es más, si pienso en hacer eso, en estos momentos me da mucha pereza y se me quitan las ganas de quitarle el polvo al blog.</description>
    </item>
    
    <item>
      <title>Encapsulación, visibilidad y retención de estado</title>
      <link>http://www.modestosanjuan.com/post/encapsulacion-visibilidad-y-retencion-de-estado/</link>
      <pubDate>Mon, 09 Jan 2017 15:34:32 +0100</pubDate>
      
      <guid>http://www.modestosanjuan.com/post/encapsulacion-visibilidad-y-retencion-de-estado/</guid>
      <description>Para empezar nada mejor que hablar del concepto el que se erigió como el único punto en común del comité de sabios mencionado en el anterior post la encapsulación. Después hablaremos de la visibilidad, un concepto que suele ir de la mano de la encapsulación, llegando a tratarse como si fueran lo mismo. Para finalizar, dedicaremos algunas líneas a hablar de la retención del estado, algo muy obvio pero esencial en orientación a objetos.</description>
    </item>
    
    <item>
      <title>Redescubriendo la orientación a objetos</title>
      <link>http://www.modestosanjuan.com/post/redescubriendo-la-orientacion-a-objetos/</link>
      <pubDate>Mon, 09 Jan 2017 15:34:32 +0100</pubDate>
      
      <guid>http://www.modestosanjuan.com/post/redescubriendo-la-orientacion-a-objetos/</guid>
      <description>Mi introducción en la orientación a objetos La primera vez que escuché hablar de la orientación a objetos yo estaba en un momento de mi aprendizaje en el que no me cuestionaba mucho el porqué de las cosas. Estaba demasiado ocupado en asimilar la cantidad de cosas que tenía que aprender y me limitaba a tratar de ingerirlas sin indigestarme, que ya era bastante. Digamos que estaba en pleno &amp;quot;Shu&amp;quot; y aprendía fundamentalmente por imitación.</description>
    </item>
    
    <item>
      <title>Arquitectura de software como habilidad</title>
      <link>http://www.modestosanjuan.com/post/arquitectura-de-software-como-habilidad/</link>
      <pubDate>Sat, 17 Dec 2016 15:34:32 +0100</pubDate>
      
      <guid>http://www.modestosanjuan.com/post/arquitectura-de-software-como-habilidad/</guid>
      <description>El pícaro en AD&amp;amp;D 2ª edición Advanced Dungeons &amp;amp; Dragons 2ª edición tenía un sistema de reglas bastante restrictivo que puede ser resumido con un ejemplo bastante sencillo: el pícaro era el único tipo de personaje que tenía permitido intentar esconderse entre la sombras o moverse sigilosamente.
Si, es así de fácil. Si no eras un pícaro, esas dos habilidades estaban fuera de tu alcance.
En su disculpa he de decir que AD&amp;amp;D 2ªed.</description>
    </item>
    
    <item>
      <title>La regla del boy scout</title>
      <link>http://www.modestosanjuan.com/la-regla-del-boy-scout/</link>
      <pubDate>Thu, 10 Nov 2016 10:01:15 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/la-regla-del-boy-scout/</guid>
      <description>Hay discipinas en las que dicen que a largo plazo es más importante la constancia que el talento. Creo que en el desarrollo de software tener constancia es una virtud.
Conforme va avanzando un proyecto, es normal que el diseño sufra cambios (preferiblemente pequeños) y a la vez el código puede sufrir altibajos de calidad.
Tener un conocimiento escaso del problema, equivocarnos al enfocar la solución y muchos otros factores pueden llevarnos a una circunstancia muy habitual: estamos enfocando una historia de usuario y pasamos por una parte de nuestro código que no se entiende bien, está mal enfocada, es complicada de extender, en general, nos está impidiendo avanzar de forma fluida hacia nuestro objetivo, entregar valor.</description>
    </item>
    
    <item>
      <title>Desarrollador, pon contenedores en tu vida</title>
      <link>http://www.modestosanjuan.com/desarrollador-pon-contenedores-en-tu-vida/</link>
      <pubDate>Sun, 06 Nov 2016 23:10:11 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/desarrollador-pon-contenedores-en-tu-vida/</guid>
      <description>No, en este post no te voy a vender las virtudes de desplegar su aplicación sobre docker. Mucho se ha escrito sobre el tema y mucho se seguirá escribiendo. También se ha escrito de lo malo que es docker y de lo no tan malo que es.
Este post está destinado especialmente a todos aquellos desarrolladores que no desplegáis vuestras aplicaciones con Docker. Porque los que ya usáis docker en el ciclo de entrega ya sabéis lo que voy a contar y además os parece obvio.</description>
    </item>
    
    <item>
      <title>Nuevos retos</title>
      <link>http://www.modestosanjuan.com/nuevos-retos/</link>
      <pubDate>Fri, 14 Oct 2016 15:40:53 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/nuevos-retos/</guid>
      <description>Estos últimos dos meses he andado bastante liado y no he prestado mucha atención al blog. Esta vez no voy a hablar de ningún tema técnico, se trata de una post muy personal. Si no te interesa mi vida, deja de leer. Si te interesa, eres un poco cotilla ;P
Este mes cierro una etapa profesional maravillosa que me ha dado muchas alegrías, me ha permitido trabajar con un equipo genial, aprender como no lo hacía en muchos años y divertirme haciendo lo que más me gusta, desarrollar software.</description>
    </item>
    
    <item>
      <title>¿Cuánto cuesta llamar a un método?</title>
      <link>http://www.modestosanjuan.com/cuanto-cuesta-llamar-a-un-metodo/</link>
      <pubDate>Tue, 02 Aug 2016 00:03:45 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/cuanto-cuesta-llamar-a-un-metodo/</guid>
      <description>Últimamente Twitter está siendo toda una fuente de inspiración. En esta ocasión el hilo culpable es este. Javier Cantón hace un comentario respecto a la diferencia de rendimiento existente entre llamar a un método virtual versus llamar al mismo método a través de un interface.
En este post no pienso hablar de lo malvadas que son las optimizaciones prematuras, asumo que el comentario de Javier tenía su contexto, así que me voy a quedar con la parte que me ha resultado curiosa.</description>
    </item>
    
    <item>
      <title>Claves primarias: inmutabilidad y generación</title>
      <link>http://www.modestosanjuan.com/claves-primarias-inmutabilidad-y-generacion/</link>
      <pubDate>Sat, 30 Jul 2016 23:39:11 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/claves-primarias-inmutabilidad-y-generacion/</guid>
      <description>Hace unos días Pablo Iglesias tuiteó una pregunta de Stack Exchange en la que hablaban sobre la inmutabilidad de las claves primarias. Se generó un debate bastante interesante en Twitter que se extendió más allá de la cuestión de la inmutabilidad. Este es un intento de recopilar y explicar algunos de los conceptos que se mencionaron durante ese debate.
Claves primarias mutables o inmutables Para el que ande un poco perdido con el concepto, básicamente se trata de determinar si la clave primaria de una entidad debería poder cambiar o no una vez establecida.</description>
    </item>
    
    <item>
      <title>Palabras malditas</title>
      <link>http://www.modestosanjuan.com/palabras-malditas/</link>
      <pubDate>Mon, 13 Jun 2016 10:02:56 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/palabras-malditas/</guid>
      <description>Extreme programming y el desarrollo ágil A principios de siglo (dicho así parece que queda muy atrás, eh&amp;#8230; :P) trabajaba en Indra como coordinador de un equipo de desarrollo. En mi entorno profesional era un poco como un bicho raro porque, además de ser 10 años más joven que la media de mi puesto, era de los pocos que se negaba a abandonar el desarrollo para dedicarme plenamente a la gestión.</description>
    </item>
    
    <item>
      <title>Presta atención a tus datos de pruebas</title>
      <link>http://www.modestosanjuan.com/presta-atencion-a-tus-datos-de-pruebas/</link>
      <pubDate>Mon, 29 Feb 2016 23:04:10 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/presta-atencion-a-tus-datos-de-pruebas/</guid>
      <description>Los datos utilizados en las pruebas son muy importantes y, aunque el tema de este post parece muy obvio, no son pocas la veces que me he encontrado con problemas debido a este tema, así que creo que merece la pena dedicarle al menos unas líneas.
Hay varios aspectos que son importantes a tener en cuenta al definir datos para nuestras pruebas automáticas. En este post me voy a centrar en tres errores que me encuentro con frecuencia:</description>
    </item>
    
    <item>
      <title>Impresiones sobre pair programming</title>
      <link>http://www.modestosanjuan.com/impresiones-sobre-pair-programming/</link>
      <pubDate>Tue, 19 Jan 2016 01:13:56 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/impresiones-sobre-pair-programming/</guid>
      <description>El viernes mantuve una conversación bastante entretenida sobre desarrollo de software con un compañero de profesión. Trabaja en una entidad financiera y al hablar de cosas como TDD, Agile, XP, etc. tenía ciertos sentimientos enfrentados. Precisamente uno de los temas que le causaban controversia era el pair programming. Su opinión básicamente se resumía en una frase: &amp;#8220;yo lo que no compro es que dos tíos senior sentados juntos a programar van a ser más productivos que si programan por separado&amp;#8221;.</description>
    </item>
    
    <item>
      <title>Nuestra programación es mala para el desarrollo de software</title>
      <link>http://www.modestosanjuan.com/nuestra-programacion-es-mala-para-el-desarrollo-de-software/</link>
      <pubDate>Mon, 28 Dec 2015 22:22:29 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/nuestra-programacion-es-mala-para-el-desarrollo-de-software/</guid>
      <description>La programación de mi color favorito El otro día mi hija me preguntó cuál era mi color favorito. Respondí inmediatamente sin pensarlo: &amp;#8220;el azul&amp;#8221;. No era la primera vez que me lo preguntaban y es un dato que tengo claro desde que era niño. O no.
En esta ocasión, no se exactamente porqué, después de responder a mi hija algo en mi cabeza empezó a retorcerse: &amp;#8220;¿es el azul mi color favorito?</description>
    </item>
    
    <item>
      <title>La importancia del rojo en TDD</title>
      <link>http://www.modestosanjuan.com/la-importancia-del-rojo-en-tdd/</link>
      <pubDate>Tue, 22 Dec 2015 14:14:43 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/la-importancia-del-rojo-en-tdd/</guid>
      <description>A un desarrollador que practique TDD, el flujo rojo, verde, refactor no le resulta extraño. En este post quiero romper una lanza a favor del rojo, ese gran incomprendido. Para ilustrarlo voy a recurrir a un ejemplo muy sencillo:
[TestMethod] public void sample_test() { var messagingService = GivenAMessagingServiceStub(); var unreadMessages = messagingService.UnreadMessages(); unreadMessages.Count.Should().Be(1) } Este ejemplo esta simplificado, pero me permite mostrar un test con una estructura de tipo given/when/then o AAA (según gustos).</description>
    </item>
    
    <item>
      <title>[PowerShell] Pasar de SecureString a String</title>
      <link>http://www.modestosanjuan.com/powershell-pasar-de-securestring-a-string/</link>
      <pubDate>Wed, 25 Nov 2015 09:16:48 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/powershell-pasar-de-securestring-a-string/</guid>
      <description>En ocasiones necesito usar un SecureString pero luego me veo obligado a utilizar ese string de forma no segura. Aunque la recomendación es no hacer esto, la realidad es que hay muchos escenarios en los que es necesario. Un ejemplo sencillo es el caso en el que necesito que el usuario meta un dato sensible por consola y pero luego necesito utilizar ese dato como texto plano para pasarlo como parámetro a un ejecutable de Windows.</description>
    </item>
    
    <item>
      <title>Value Providers y Parameter Binding en ASP.NET Web API</title>
      <link>http://www.modestosanjuan.com/value-providers-y-parameter-binding-en-asp-net-web-api/</link>
      <pubDate>Fri, 13 Nov 2015 10:02:22 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/value-providers-y-parameter-binding-en-asp-net-web-api/</guid>
      <description>Cuando necesito acceder a información de la Request desde una acción de un controlador en ASP.NET Web API, la primera tentación es acceder directamente al objeto request y buscar lo que necesito. El principal problema de hacer esto es que convierte en un infierno hacer cualquier tipo de prueba automatizada para esta acción. Por ejemplo:
[HttpGet] [Route(&#34;doAnything&#34;)] public IHttpActionResult Get() { var referrer = request.Headers.Referrer var resul = ..... // DO ANY STUFF WITH THE REFERRER return result; } El mecanismo más sencillo que se me ocurre para hacer que esta acción sea fácil de probar es hacer que el dato que necesito de la request, le llegue como parámetro a la acción:</description>
    </item>
    
    <item>
      <title>Bus de eventos usando Reactive Extensions</title>
      <link>http://www.modestosanjuan.com/bus-de-eventos-usando-reactive-extensions/</link>
      <pubDate>Tue, 10 Nov 2015 09:32:59 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/bus-de-eventos-usando-reactive-extensions/</guid>
      <description>Utilizar un bus de eventos dentro de una aplicación es algo bastante común. Un ejemplo muy sencillo podría ser desacoplar la lógica de envío de notificaciones al usuario en WPF desde los ViewModels sin necesidad de recurrir a la inyección de dependencias en el ViewModel. Aunque hasta ahora había recurrido siempre a programar mi propio bus de eventos, utilizar Reactive Extensions me ha resultado muy interesante, útil y sencillo. Este sería un ejemplo de bus de eventos utilizando RX:</description>
    </item>
    
    <item>
      <title>[PowerShell] Sacando partido a la conversión de tipos</title>
      <link>http://www.modestosanjuan.com/powershell-sacando-partido-a-la-conversion-de-tipos/</link>
      <pubDate>Thu, 22 Oct 2015 00:27:51 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/powershell-sacando-partido-a-la-conversion-de-tipos/</guid>
      <description>PowerShell ETS (Extended Type System) forma parte de las tripas de PowerShell y es la parte que permite que convivan tipos de .Net, COM, ADSI y WMI pero que a nosotros se nos muestren como objetos de PowerShell de primer orden.
ETS tiene mucha potencia y no siempre es fácil obtener documentación sobre cómo hacer las cosas, pero en este post quiero dejarle a mi yo futuro un regalito para cuando necesite realizar conversión de tipos de .</description>
    </item>
    
    <item>
      <title>[PowerShell] Distinguir entre rutas relativas y absolutas</title>
      <link>http://www.modestosanjuan.com/powershell-distinguir-entre-rutas-relativas-y-absolutas/</link>
      <pubDate>Thu, 08 Oct 2015 22:41:43 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/powershell-distinguir-entre-rutas-relativas-y-absolutas/</guid>
      <description>Esta vez toca un truco muy simple pero muy útil cuando tengo un script que recibe una ruta como parámetro. Es muy típico no saber si la ruta es absoluta o relativa y muy frecuente querer hacer un Join-Path con la ruta actual (o cualquier otra) en caso de que la ruta sea relativa.
En ocasiones me olvido de que PowerShell tiene a su disposición toda la potencia de .Net y en este caso es precisamente útil.</description>
    </item>
    
    <item>
      <title>[PowerShell] Variables automáticas</title>
      <link>http://www.modestosanjuan.com/powershell-variables-automaticas/</link>
      <pubDate>Sun, 20 Sep 2015 22:10:01 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/powershell-variables-automaticas/</guid>
      <description>PowerShell dispone de una serie de variables gestionadas de forma automática que permiten obtener información relacionada con la ejecución de código actual. Su propósito y utilidad es variado, siendo algunas de uso muy frecuente y otras de uso marginal. En cualquier caso, no está mal conocer unas cuantas y que suene dentro de la cabeza que hay otras que tal vez sea útiles en el futuro.
Tanto la documentación oficial como el comando _&amp;#8220;get-help about_automatic_variables&amp;#8220;_ contienen el listado completo, pero me gustaría enumerar por aquí algunas que me resultan interesantes o que tienen truco.</description>
    </item>
    
    <item>
      <title>[PowerShell] Ojo que no hay un único $null</title>
      <link>http://www.modestosanjuan.com/powershell-ojo-que-no-hay-un-unico-null/</link>
      <pubDate>Wed, 09 Sep 2015 20:49:56 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/powershell-ojo-que-no-hay-un-unico-null/</guid>
      <description>Este es un ejemplo curioso de esos que me ha vuelto loco hasta que me he dado cuenta. Si parto de este código:
$item1 = Get-ChildItem | Where-Object {$_ -eq &#34;no encuentras esto ni de coña&#34;} &#34;item1 es nulo? {0}&#34; -f ($null -eq $item1) $item2 = $null &#34;item2 es nulo? {0}&#34; -f ($null -eq $item2) Al ejecutarlo el resultado es &amp;#8220;True&amp;#8221; en ambos casos. Vamos, que tanto item1 como item2 son $null.</description>
    </item>
    
    <item>
      <title>[PowerShell] Saber si una variable ya ha sido definida</title>
      <link>http://www.modestosanjuan.com/powershell-saber-si-una-variable-ya-ha-sido-definida/</link>
      <pubDate>Thu, 20 Aug 2015 22:14:23 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/powershell-saber-si-una-variable-ya-ha-sido-definida/</guid>
      <description>En ocasiones tengo la necesidad de saber si una variable ha sido previamente definida. Esto es especialmente importante porque utilizo siempre el &amp;#8220;Set-StrictMode -Version 2&amp;#8221; y, si necesito recurrir a variables de otros scopes, cuando intento acceder a una variable no definida obtengo un error. Aunque generalmente intento no recurrir a otros scopes, especialmente el $global, en ocasiones los necesito, especialmente el $script.
Un ejemplo podría ser querer verificar si una variable que contiene un array ha sido inicializada o no, para poder añadirle ítems.</description>
    </item>
    
    <item>
      <title>[PowerShell] Devolver un array vacío desde una función</title>
      <link>http://www.modestosanjuan.com/powershell-devolver-un-array-vacio-desde-una-funcion/</link>
      <pubDate>Thu, 20 Aug 2015 15:07:23 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/powershell-devolver-un-array-vacio-desde-una-funcion/</guid>
      <description>Esto es un truco rápido muy chorra pero que puede volver loco a más de un desarrollador que no esté acostumbrado a las peculiaridades de PowerShell. Tomando este código como ejemplo:
function Get-EmptyArray { [System.Collections.ArrayList]$anyArray = @() return $anyArray } Write-Host (Get-EmptyArray).GetType() En principio podría resultar bastante evidente que el resultado de la ejecución será ver por pantalla la cadena &amp;#8220;System.Collections.Arraylist&amp;#8221;. Pues no, el resultado será un error como una casa del estilo de &amp;#8220;You cannot call a method on a null-valued expression&amp;#8221;</description>
    </item>
    
    <item>
      <title>[PowerShell] Las ventajas de usar parámetros y variables tipados</title>
      <link>http://www.modestosanjuan.com/powershell-las-ventajas-de-usar-parametros-y-variables-tipados/</link>
      <pubDate>Tue, 18 Aug 2015 09:52:05 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/powershell-las-ventajas-de-usar-parametros-y-variables-tipados/</guid>
      <description>Cuanto más uso PowerShell más convencido estoy de lo importante que es tipar las variables y los parámetros de las funciones. Debido a la forma en que trabaja PowerShell, especificar los tipos me ayuda a evitar comportamientos indeseados.
Por ejemplo, dado este script:
Set-StrictMode -Version 2 $items = Get-ChildItem if ($items) { $items.Count }  Si lo ejecuto estando en un directorio con varios archivos o carpetas, mostrará en pantalla el número de items.</description>
    </item>
    
    <item>
      <title>[PowerShell] Switch parameters</title>
      <link>http://www.modestosanjuan.com/powershell-switch-parameters/</link>
      <pubDate>Mon, 17 Aug 2015 22:37:14 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/powershell-switch-parameters/</guid>
      <description>En PowerShell es muy común usar parámetros de tipo switch. La peculiaridad de estos parámetros es que al usarlos, se especifica el nombre del parámetro pero no se proporciona ningún valor, ya que se asume que al usarlo su valor será $true y $false si no se especifica. Ejemplos típicos son el uso de &amp;#8211;Recurse o -Force. 
Este sería un ejemplo de con este tipo de parámetros:
Function Do-Something([Switch]$Recurse) { Write-Host $Recurse } Do-Something -Recurse Do-Something  Si ejecuto este script, veré por pantalla $True y $False, como podría esperar.</description>
    </item>
    
    <item>
      <title>[PowerShell] Cuidado que ($a -eq $a) no siempre es $true</title>
      <link>http://www.modestosanjuan.com/powershell-cuidado-que-a-eq-a-no-siempre-es-true/</link>
      <pubDate>Fri, 07 Aug 2015 00:22:46 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/powershell-cuidado-que-a-eq-a-no-siempre-es-true/</guid>
      <description>Este es uno de esos ejemplos en los que es importante intentar documentarse todo lo posible al desarrollar en un lenguaje/plataforma que no conocemos. Es frecuente asumir conceptos basados en nuestros conocimientos previos de otros lenguajes, pero en ocasiones nos puede jugar malas pasadas. En este caso voy a mostrar un ejemplo muy sencillo en el que yo asumí erróneamente el funcionamiento de algo tan sencillo como un operador de comparación.</description>
    </item>
    
    <item>
      <title>[PowerShell] Crear el fichero de manifiesto para muchos módulos a la vez</title>
      <link>http://www.modestosanjuan.com/powershell-crear-el-fichero-de-manifiesto-para-muchos-modulos-a-la-vez/</link>
      <pubDate>Wed, 05 Aug 2015 13:50:27 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/powershell-crear-el-fichero-de-manifiesto-para-muchos-modulos-a-la-vez/</guid>
      <description>Hoy he tenido que crear de golpe el manifest a varios módulos. Teníamos más de 10 módulos (.psm1), cada uno en su propia carpeta y necesitaba añadirles el manifest para poder definir la empresa de cada módulo. Gracias al pipeline de PowerShell, no he tenido que esforzarme mucho para conseguirlo:
ls *.psm1 -Recurse | ForEach-Object { $manifestFileName = $_.BaseName + &#34;.psd1&#34; $manifestPath = Join-Path $_.Directory $manifestFileName $companyConstant = &#34;AnyCompany&#34; New-ModuleManifest -Path $manifestPath -RootModule $_.</description>
    </item>
    
    <item>
      <title>[PowerShell] La importancia del Set-StrictMode</title>
      <link>http://www.modestosanjuan.com/powershell-la-importancia-del-set-strictmode/</link>
      <pubDate>Mon, 03 Aug 2015 23:50:39 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/powershell-la-importancia-del-set-strictmode/</guid>
      <description>Cuando empecé a programar scripts en PowerShell, cometía muchísimos fallos fruto de mi intoxicación con otros lenguajes, especialmente C#, con el que trabajo habitualmente. Después de un tiempo, me di cuenta que PowerShell tiene muchas más similitudes con JavaScript que con C# ya que es un lenguaje interpretado y de tipado débil. Y un tiempo después, aprendí que podía programar en PowerShell de una manera más próxima a TypeScript.</description>
    </item>
    
    <item>
      <title>[PowerShell] Interrumpir la ejecución cuando Import-Module no encuentra el módulo</title>
      <link>http://www.modestosanjuan.com/interrumpir-la-ejecucion-cuando-import-module-no-encuentra-el-modulo/</link>
      <pubDate>Tue, 30 Jun 2015 18:03:02 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/interrumpir-la-ejecucion-cuando-import-module-no-encuentra-el-modulo/</guid>
      <description>Esto es un truco sencillo y muy básico de PowerShell, pero puede desconcertar bastante a quien está empezando o utiliza PowerShell de forma esporádica.
En PowerShell existen los llamados &amp;#8220;terminating errors&amp;#8221; y los &amp;#8220;non-terminating errors&amp;#8221;. Como su nombre permite intuir, unos finalizan la ejecución del script en curso cuando se producen y los otros no, limitándose a informar del error. Hasta aquí he descrito el comportamiento por defecto. Que un error sea del tipo &amp;#8220;terminating&amp;#8221; o del tipo &amp;#8220;non-terminating&amp;#8221;, no es algo que nosotros podamos controlar, y eso puede dar algún que otro quebradero de cabeza en algunas ocasiones.</description>
    </item>
    
    <item>
      <title>Eliminar regiones (#region) de forma masiva desde Visual Studio</title>
      <link>http://www.modestosanjuan.com/eliminar-regiones-de-forma-masiva-desde-visual-studio/</link>
      <pubDate>Tue, 16 Jun 2015 10:58:45 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/eliminar-regiones-de-forma-masiva-desde-visual-studio/</guid>
      <description>No voy a entrar en el debate de si el uso de #regions es una buena práctica o no, pero es algo que no utilizo y que suelo interpretar como un mal olor cuando me lo encuentro en el código. Me he animado a escribir este pequeño apune porque recientemente me he encontrado con la necesidad de eliminar de un proyecto casi 25.000 regiones (si, veinticinco mil) y quiero tener esto a mano para el futuro.</description>
    </item>
    
    <item>
      <title>¿Necesitas programar un servicio para Windows? Prueba Topshelf</title>
      <link>http://www.modestosanjuan.com/necesitas-programar-un-servicio-para-windows-prueba-topshelf/</link>
      <pubDate>Mon, 15 Jun 2015 23:44:42 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/necesitas-programar-un-servicio-para-windows-prueba-topshelf/</guid>
      <description>Programar un servicio para Windows suele ser una tarea engorrosa y Topshelf proporciona una alternativa bastante interesante y muchísimo menos engorrosa que la plantilla por defecto que incorpora Visual Studio.
Aunque podría enumerar bastantes aspectos interesantes de Topshelf, me quedo con uno que para mi es fundamental, permite que una aplicación de consola sea un servicio de Windows. Esto significa que es posible recurrir a la aplicación de consola durante la fase de desarrollo o para su ejecución de forma independiente, pero que además es posible instalar esa aplicación de consola como un servicio Windows simplemente pasando un parámetro en su ejecución.</description>
    </item>
    
    <item>
      <title>Utilizando Extensionless para monitorizar logs y excepciones</title>
      <link>http://www.modestosanjuan.com/utilizando-extensionless-para-monitorizar-logs-y-excepciones/</link>
      <pubDate>Fri, 05 Jun 2015 18:11:52 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/utilizando-extensionless-para-monitorizar-logs-y-excepciones/</guid>
      <description>Cada vez que abordo un nuevo desarrollo, considero que la generación de trazas es una parte vital ya que es uno de los mecanismos que nos va a permitir diagnosticar e identificar cualquier tipo de problema cuando estemos en producción, en ocasiones incluso antes de que los propios usuarios lleguen a reportarlo.
Hacer que nuestra aplicación genere las trazas adecuadas es una gran herramienta, no sólo para diagnosticar bugs, también permite identificar problemas relacionados con el rendimiento y otro tipo de funcionamientos anómalos de nuestras aplicaciones.</description>
    </item>
    
    <item>
      <title>Cómo crear Appx para Sideloading desde Integración Continua</title>
      <link>http://www.modestosanjuan.com/como-crear-appx-para-sideloading-desde-integracion-continua/</link>
      <pubDate>Wed, 13 May 2015 06:45:57 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/como-crear-appx-para-sideloading-desde-integracion-continua/</guid>
      <description>Cuando trabajamos con aplicaciones para la tienda de Windows, hay escenarios en los que necesitamos hacer Sideloading. Básicamente el Sideloading nos permite instalar una aplicación de la tienda de Windows, sin utilizar la tienda de Windows. Las razones para querer hacer Sideloading pueden ser muchas: probar la aplicación en local antes de subirla a la tienda, instalar la aplicación en algunos dispositivos para hacer testing en friends&amp;amp;family o simplemente utilizar la aplicación a nivel corporativo fuera de la tienda de Windows.</description>
    </item>
    
    <item>
      <title>[PowerShell] Evitar que wget (Invoke-WebRequest) tarde tanto</title>
      <link>http://www.modestosanjuan.com/truco-evitar-que-wget-invoke-webrequest-tarde-tanto-en-powershell/</link>
      <pubDate>Sun, 22 Mar 2015 19:18:44 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/truco-evitar-que-wget-invoke-webrequest-tarde-tanto-en-powershell/</guid>
      <description>Mientras estaba preparando unos scripts para automatizar el proceso de sideloading de una aplicación Windows 8.1, me encontré con un problema bastante tonto. Estaba descargando por HTTP el paquete de la aplicación desde una red local pero el comando wget de PowerShell tardaba demasiado. Tenía claro que no era problema de la red porque el archivo bajaba a buena velocidad por otros medios, pero siempre que usaba wget el comando tardaba demasiado tiempo.</description>
    </item>
    
    <item>
      <title>Aclarando conceptos: proyectos PCL, universales y shared source</title>
      <link>http://www.modestosanjuan.com/aclarando-conceptos-proyectos-pcl-universales-y-shared-source/</link>
      <pubDate>Sun, 08 Mar 2015 12:22:55 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/aclarando-conceptos-proyectos-pcl-universales-y-shared-source/</guid>
      <description>Lo habitual cuando quiero compartir código entre proyectos es recurrir a crear bibliotecas de clases. Dependiendo del tipo de proyectos en los que quiera reutilizar mi trabajo, es necesario recurrir a bibliotecas portables (PCL) o incluso a proyectos de código compartido (shared source). Con bibliotecas PCL había trabajado anteriormente, pero no con proyectos universales y shared source, y creo que es importante tener claro cuales son las diferencias entre cada tipo, ya que juegan papeles muy diferentes.</description>
    </item>
    
    <item>
      <title>[Solucionado] Fluent Migrator no encuentra migraciones</title>
      <link>http://www.modestosanjuan.com/fluent-migrator-no-encuentra-migraciones/</link>
      <pubDate>Mon, 19 Jan 2015 01:23:05 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/fluent-migrator-no-encuentra-migraciones/</guid>
      <description>Hace unos meses empecé a trabajar en un proyecto en el que utilizamos Fluent Migrator. Todo funciona bien el proyecto tiene bastantes migraciones funcionando sin problema. En líneas generales funciona casi igual que las migraciones de EF, con algún detalle distinto.
El caso es que hoy he empezado un proyecto nuevo y he añadido la referencia al paquete de Fluent Migrator para empezar a utilizarlo. Cuando he lanzado las migraciones parecía que todo estaba bien (no daba ningún error), pero no me encontraba ninguna de las migraciones que había definido en el ensamblado de migraciones.</description>
    </item>
    
    <item>
      <title>Datos de ejemplo en el ViewModel para facilitar la vista de diseño</title>
      <link>http://www.modestosanjuan.com/datos-de-ejemplo-en-el-viewmodel-para-facilitar-la-vista-de-diseno/</link>
      <pubDate>Wed, 17 Dec 2014 00:27:25 +0000</pubDate>
      
      <guid>http://www.modestosanjuan.com/datos-de-ejemplo-en-el-viewmodel-para-facilitar-la-vista-de-diseno/</guid>
      <description>Al trabajar con XAML, especialmente si la vista tiene un listado de items, puede resultar muy complicado ajustar la vista para que se vea correctamente. Tareas como ajustar los márgenes, la posición de los elementos o cualquier tipo de cambio en los estilos se pueden convertir en algo bastante pesado.
Este es un ejemplo de una vista de que contiene un ListView sin datos de ejemplo en vista de diseño:</description>
    </item>
    
  </channel>
</rss>